/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// VariationPropertyName Variation property name model
type VariationPropertyName struct {
	PropertyValueId *int32 `json:"propertyValueId,omitempty"`
	Lang *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewVariationPropertyName instantiates a new VariationPropertyName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariationPropertyName() *VariationPropertyName {
	this := VariationPropertyName{}
	return &this
}

// NewVariationPropertyNameWithDefaults instantiates a new VariationPropertyName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariationPropertyNameWithDefaults() *VariationPropertyName {
	this := VariationPropertyName{}
	return &this
}

// GetPropertyValueId returns the PropertyValueId field value if set, zero value otherwise.
func (o *VariationPropertyName) GetPropertyValueId() int32 {
	if o == nil || o.PropertyValueId == nil {
		var ret int32
		return ret
	}
	return *o.PropertyValueId
}

// GetPropertyValueIdOk returns a tuple with the PropertyValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationPropertyName) GetPropertyValueIdOk() (*int32, bool) {
	if o == nil || o.PropertyValueId == nil {
		return nil, false
	}
	return o.PropertyValueId, true
}

// HasPropertyValueId returns a boolean if a field has been set.
func (o *VariationPropertyName) HasPropertyValueId() bool {
	if o != nil && o.PropertyValueId != nil {
		return true
	}

	return false
}

// SetPropertyValueId gets a reference to the given int32 and assigns it to the PropertyValueId field.
func (o *VariationPropertyName) SetPropertyValueId(v int32) {
	o.PropertyValueId = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *VariationPropertyName) GetLang() string {
	if o == nil || o.Lang == nil {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationPropertyName) GetLangOk() (*string, bool) {
	if o == nil || o.Lang == nil {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *VariationPropertyName) HasLang() bool {
	if o != nil && o.Lang != nil {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *VariationPropertyName) SetLang(v string) {
	o.Lang = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VariationPropertyName) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationPropertyName) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariationPropertyName) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *VariationPropertyName) SetValue(v string) {
	o.Value = &v
}

func (o VariationPropertyName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PropertyValueId != nil {
		toSerialize["propertyValueId"] = o.PropertyValueId
	}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVariationPropertyName struct {
	value *VariationPropertyName
	isSet bool
}

func (v NullableVariationPropertyName) Get() *VariationPropertyName {
	return v.value
}

func (v *NullableVariationPropertyName) Set(val *VariationPropertyName) {
	v.value = val
	v.isSet = true
}

func (v NullableVariationPropertyName) IsSet() bool {
	return v.isSet
}

func (v *NullableVariationPropertyName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariationPropertyName(val *VariationPropertyName) *NullableVariationPropertyName {
	return &NullableVariationPropertyName{value: val, isSet: true}
}

func (v NullableVariationPropertyName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariationPropertyName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


