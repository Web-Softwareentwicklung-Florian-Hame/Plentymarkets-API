/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// VariationUnit variation unit model
type VariationUnit struct {
	Id *int32 `json:"id,omitempty"`
	UnitId *int32 `json:"unitId,omitempty"`
	Content *int32 `json:"content,omitempty"`
}

// NewVariationUnit instantiates a new VariationUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariationUnit() *VariationUnit {
	this := VariationUnit{}
	return &this
}

// NewVariationUnitWithDefaults instantiates a new VariationUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariationUnitWithDefaults() *VariationUnit {
	this := VariationUnit{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VariationUnit) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationUnit) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VariationUnit) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *VariationUnit) SetId(v int32) {
	o.Id = &v
}

// GetUnitId returns the UnitId field value if set, zero value otherwise.
func (o *VariationUnit) GetUnitId() int32 {
	if o == nil || o.UnitId == nil {
		var ret int32
		return ret
	}
	return *o.UnitId
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationUnit) GetUnitIdOk() (*int32, bool) {
	if o == nil || o.UnitId == nil {
		return nil, false
	}
	return o.UnitId, true
}

// HasUnitId returns a boolean if a field has been set.
func (o *VariationUnit) HasUnitId() bool {
	if o != nil && o.UnitId != nil {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given int32 and assigns it to the UnitId field.
func (o *VariationUnit) SetUnitId(v int32) {
	o.UnitId = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *VariationUnit) GetContent() int32 {
	if o == nil || o.Content == nil {
		var ret int32
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationUnit) GetContentOk() (*int32, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *VariationUnit) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given int32 and assigns it to the Content field.
func (o *VariationUnit) SetContent(v int32) {
	o.Content = &v
}

func (o VariationUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.UnitId != nil {
		toSerialize["unitId"] = o.UnitId
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableVariationUnit struct {
	value *VariationUnit
	isSet bool
}

func (v NullableVariationUnit) Get() *VariationUnit {
	return v.value
}

func (v *NullableVariationUnit) Set(val *VariationUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableVariationUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableVariationUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariationUnit(val *VariationUnit) *NullableVariationUnit {
	return &NullableVariationUnit{value: val, isSet: true}
}

func (v NullableVariationUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariationUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


