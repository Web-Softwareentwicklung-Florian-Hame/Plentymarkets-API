/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Category category model
type Category struct {
	Id *int32 `json:"id,omitempty"`
	ParentCategoryId *int32 `json:"parentCategoryId,omitempty"`
	Level *int32 `json:"level,omitempty"`
	Type *string `json:"type,omitempty"`
	Linklist *string `json:"linklist,omitempty"`
	Right *string `json:"right,omitempty"`
	Sitemap *string `json:"sitemap,omitempty"`
	HasChildren *bool `json:"hasChildren,omitempty"`
	Details *[]CategoryDetails `json:"details,omitempty"`
}

// NewCategory instantiates a new Category object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategory() *Category {
	this := Category{}
	return &this
}

// NewCategoryWithDefaults instantiates a new Category object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryWithDefaults() *Category {
	this := Category{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Category) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Category) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Category) SetId(v int32) {
	o.Id = &v
}

// GetParentCategoryId returns the ParentCategoryId field value if set, zero value otherwise.
func (o *Category) GetParentCategoryId() int32 {
	if o == nil || o.ParentCategoryId == nil {
		var ret int32
		return ret
	}
	return *o.ParentCategoryId
}

// GetParentCategoryIdOk returns a tuple with the ParentCategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetParentCategoryIdOk() (*int32, bool) {
	if o == nil || o.ParentCategoryId == nil {
		return nil, false
	}
	return o.ParentCategoryId, true
}

// HasParentCategoryId returns a boolean if a field has been set.
func (o *Category) HasParentCategoryId() bool {
	if o != nil && o.ParentCategoryId != nil {
		return true
	}

	return false
}

// SetParentCategoryId gets a reference to the given int32 and assigns it to the ParentCategoryId field.
func (o *Category) SetParentCategoryId(v int32) {
	o.ParentCategoryId = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *Category) GetLevel() int32 {
	if o == nil || o.Level == nil {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetLevelOk() (*int32, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *Category) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *Category) SetLevel(v int32) {
	o.Level = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Category) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Category) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Category) SetType(v string) {
	o.Type = &v
}

// GetLinklist returns the Linklist field value if set, zero value otherwise.
func (o *Category) GetLinklist() string {
	if o == nil || o.Linklist == nil {
		var ret string
		return ret
	}
	return *o.Linklist
}

// GetLinklistOk returns a tuple with the Linklist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetLinklistOk() (*string, bool) {
	if o == nil || o.Linklist == nil {
		return nil, false
	}
	return o.Linklist, true
}

// HasLinklist returns a boolean if a field has been set.
func (o *Category) HasLinklist() bool {
	if o != nil && o.Linklist != nil {
		return true
	}

	return false
}

// SetLinklist gets a reference to the given string and assigns it to the Linklist field.
func (o *Category) SetLinklist(v string) {
	o.Linklist = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *Category) GetRight() string {
	if o == nil || o.Right == nil {
		var ret string
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetRightOk() (*string, bool) {
	if o == nil || o.Right == nil {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *Category) HasRight() bool {
	if o != nil && o.Right != nil {
		return true
	}

	return false
}

// SetRight gets a reference to the given string and assigns it to the Right field.
func (o *Category) SetRight(v string) {
	o.Right = &v
}

// GetSitemap returns the Sitemap field value if set, zero value otherwise.
func (o *Category) GetSitemap() string {
	if o == nil || o.Sitemap == nil {
		var ret string
		return ret
	}
	return *o.Sitemap
}

// GetSitemapOk returns a tuple with the Sitemap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetSitemapOk() (*string, bool) {
	if o == nil || o.Sitemap == nil {
		return nil, false
	}
	return o.Sitemap, true
}

// HasSitemap returns a boolean if a field has been set.
func (o *Category) HasSitemap() bool {
	if o != nil && o.Sitemap != nil {
		return true
	}

	return false
}

// SetSitemap gets a reference to the given string and assigns it to the Sitemap field.
func (o *Category) SetSitemap(v string) {
	o.Sitemap = &v
}

// GetHasChildren returns the HasChildren field value if set, zero value otherwise.
func (o *Category) GetHasChildren() bool {
	if o == nil || o.HasChildren == nil {
		var ret bool
		return ret
	}
	return *o.HasChildren
}

// GetHasChildrenOk returns a tuple with the HasChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetHasChildrenOk() (*bool, bool) {
	if o == nil || o.HasChildren == nil {
		return nil, false
	}
	return o.HasChildren, true
}

// HasHasChildren returns a boolean if a field has been set.
func (o *Category) HasHasChildren() bool {
	if o != nil && o.HasChildren != nil {
		return true
	}

	return false
}

// SetHasChildren gets a reference to the given bool and assigns it to the HasChildren field.
func (o *Category) SetHasChildren(v bool) {
	o.HasChildren = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Category) GetDetails() []CategoryDetails {
	if o == nil || o.Details == nil {
		var ret []CategoryDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetDetailsOk() (*[]CategoryDetails, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Category) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []CategoryDetails and assigns it to the Details field.
func (o *Category) SetDetails(v []CategoryDetails) {
	o.Details = &v
}

func (o Category) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ParentCategoryId != nil {
		toSerialize["parentCategoryId"] = o.ParentCategoryId
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Linklist != nil {
		toSerialize["linklist"] = o.Linklist
	}
	if o.Right != nil {
		toSerialize["right"] = o.Right
	}
	if o.Sitemap != nil {
		toSerialize["sitemap"] = o.Sitemap
	}
	if o.HasChildren != nil {
		toSerialize["hasChildren"] = o.HasChildren
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableCategory struct {
	value *Category
	isSet bool
}

func (v NullableCategory) Get() *Category {
	return v.value
}

func (v *NullableCategory) Set(val *Category) {
	v.value = val
	v.isSet = true
}

func (v NullableCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategory(val *Category) *NullableCategory {
	return &NullableCategory{value: val, isSet: true}
}

func (v NullableCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


