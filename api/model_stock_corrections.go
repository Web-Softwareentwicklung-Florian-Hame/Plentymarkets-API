/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// StockCorrections struct for StockCorrections
type StockCorrections struct {
	Corrections *[]StockCorrectionEntry `json:"corrections,omitempty"`
}

// NewStockCorrections instantiates a new StockCorrections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockCorrections() *StockCorrections {
	this := StockCorrections{}
	return &this
}

// NewStockCorrectionsWithDefaults instantiates a new StockCorrections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockCorrectionsWithDefaults() *StockCorrections {
	this := StockCorrections{}
	return &this
}

// GetCorrections returns the Corrections field value if set, zero value otherwise.
func (o *StockCorrections) GetCorrections() []StockCorrectionEntry {
	if o == nil || o.Corrections == nil {
		var ret []StockCorrectionEntry
		return ret
	}
	return *o.Corrections
}

// GetCorrectionsOk returns a tuple with the Corrections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockCorrections) GetCorrectionsOk() (*[]StockCorrectionEntry, bool) {
	if o == nil || o.Corrections == nil {
		return nil, false
	}
	return o.Corrections, true
}

// HasCorrections returns a boolean if a field has been set.
func (o *StockCorrections) HasCorrections() bool {
	if o != nil && o.Corrections != nil {
		return true
	}

	return false
}

// SetCorrections gets a reference to the given []StockCorrectionEntry and assigns it to the Corrections field.
func (o *StockCorrections) SetCorrections(v []StockCorrectionEntry) {
	o.Corrections = &v
}

func (o StockCorrections) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Corrections != nil {
		toSerialize["corrections"] = o.Corrections
	}
	return json.Marshal(toSerialize)
}

type NullableStockCorrections struct {
	value *StockCorrections
	isSet bool
}

func (v NullableStockCorrections) Get() *StockCorrections {
	return v.value
}

func (v *NullableStockCorrections) Set(val *StockCorrections) {
	v.value = val
	v.isSet = true
}

func (v NullableStockCorrections) IsSet() bool {
	return v.isSet
}

func (v *NullableStockCorrections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockCorrections(val *StockCorrections) *NullableStockCorrections {
	return &NullableStockCorrections{value: val, isSet: true}
}

func (v NullableStockCorrections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockCorrections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


