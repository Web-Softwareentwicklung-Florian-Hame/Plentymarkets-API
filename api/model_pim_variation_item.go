/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PimVariationItem struct for PimVariationItem
type PimVariationItem struct {
	Id *int32 `json:"id,omitempty"`
	FlagOne *int32 `json:"flagOne,omitempty"`
	FlagTwo *int32 `json:"flagTwo,omitempty"`
}

// NewPimVariationItem instantiates a new PimVariationItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPimVariationItem() *PimVariationItem {
	this := PimVariationItem{}
	return &this
}

// NewPimVariationItemWithDefaults instantiates a new PimVariationItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPimVariationItemWithDefaults() *PimVariationItem {
	this := PimVariationItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PimVariationItem) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationItem) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PimVariationItem) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PimVariationItem) SetId(v int32) {
	o.Id = &v
}

// GetFlagOne returns the FlagOne field value if set, zero value otherwise.
func (o *PimVariationItem) GetFlagOne() int32 {
	if o == nil || o.FlagOne == nil {
		var ret int32
		return ret
	}
	return *o.FlagOne
}

// GetFlagOneOk returns a tuple with the FlagOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationItem) GetFlagOneOk() (*int32, bool) {
	if o == nil || o.FlagOne == nil {
		return nil, false
	}
	return o.FlagOne, true
}

// HasFlagOne returns a boolean if a field has been set.
func (o *PimVariationItem) HasFlagOne() bool {
	if o != nil && o.FlagOne != nil {
		return true
	}

	return false
}

// SetFlagOne gets a reference to the given int32 and assigns it to the FlagOne field.
func (o *PimVariationItem) SetFlagOne(v int32) {
	o.FlagOne = &v
}

// GetFlagTwo returns the FlagTwo field value if set, zero value otherwise.
func (o *PimVariationItem) GetFlagTwo() int32 {
	if o == nil || o.FlagTwo == nil {
		var ret int32
		return ret
	}
	return *o.FlagTwo
}

// GetFlagTwoOk returns a tuple with the FlagTwo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationItem) GetFlagTwoOk() (*int32, bool) {
	if o == nil || o.FlagTwo == nil {
		return nil, false
	}
	return o.FlagTwo, true
}

// HasFlagTwo returns a boolean if a field has been set.
func (o *PimVariationItem) HasFlagTwo() bool {
	if o != nil && o.FlagTwo != nil {
		return true
	}

	return false
}

// SetFlagTwo gets a reference to the given int32 and assigns it to the FlagTwo field.
func (o *PimVariationItem) SetFlagTwo(v int32) {
	o.FlagTwo = &v
}

func (o PimVariationItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.FlagOne != nil {
		toSerialize["flagOne"] = o.FlagOne
	}
	if o.FlagTwo != nil {
		toSerialize["flagTwo"] = o.FlagTwo
	}
	return json.Marshal(toSerialize)
}

type NullablePimVariationItem struct {
	value *PimVariationItem
	isSet bool
}

func (v NullablePimVariationItem) Get() *PimVariationItem {
	return v.value
}

func (v *NullablePimVariationItem) Set(val *PimVariationItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePimVariationItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePimVariationItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePimVariationItem(val *PimVariationItem) *NullablePimVariationItem {
	return &NullablePimVariationItem{value: val, isSet: true}
}

func (v NullablePimVariationItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePimVariationItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


