/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ImageName image name model
type ImageName struct {
	ImageId *int32 `json:"imageId,omitempty"`
	Lang *string `json:"lang,omitempty"`
	Name *string `json:"name,omitempty"`
	Alternate *string `json:"alternate,omitempty"`
}

// NewImageName instantiates a new ImageName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageName() *ImageName {
	this := ImageName{}
	return &this
}

// NewImageNameWithDefaults instantiates a new ImageName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageNameWithDefaults() *ImageName {
	this := ImageName{}
	return &this
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *ImageName) GetImageId() int32 {
	if o == nil || o.ImageId == nil {
		var ret int32
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageName) GetImageIdOk() (*int32, bool) {
	if o == nil || o.ImageId == nil {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *ImageName) HasImageId() bool {
	if o != nil && o.ImageId != nil {
		return true
	}

	return false
}

// SetImageId gets a reference to the given int32 and assigns it to the ImageId field.
func (o *ImageName) SetImageId(v int32) {
	o.ImageId = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *ImageName) GetLang() string {
	if o == nil || o.Lang == nil {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageName) GetLangOk() (*string, bool) {
	if o == nil || o.Lang == nil {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *ImageName) HasLang() bool {
	if o != nil && o.Lang != nil {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *ImageName) SetLang(v string) {
	o.Lang = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImageName) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageName) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImageName) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImageName) SetName(v string) {
	o.Name = &v
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *ImageName) GetAlternate() string {
	if o == nil || o.Alternate == nil {
		var ret string
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageName) GetAlternateOk() (*string, bool) {
	if o == nil || o.Alternate == nil {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *ImageName) HasAlternate() bool {
	if o != nil && o.Alternate != nil {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given string and assigns it to the Alternate field.
func (o *ImageName) SetAlternate(v string) {
	o.Alternate = &v
}

func (o ImageName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ImageId != nil {
		toSerialize["imageId"] = o.ImageId
	}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Alternate != nil {
		toSerialize["alternate"] = o.Alternate
	}
	return json.Marshal(toSerialize)
}

type NullableImageName struct {
	value *ImageName
	isSet bool
}

func (v NullableImageName) Get() *ImageName {
	return v.value
}

func (v *NullableImageName) Set(val *ImageName) {
	v.value = val
	v.isSet = true
}

func (v NullableImageName) IsSet() bool {
	return v.isSet
}

func (v *NullableImageName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageName(val *ImageName) *NullableImageName {
	return &NullableImageName{value: val, isSet: true}
}

func (v NullableImageName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


