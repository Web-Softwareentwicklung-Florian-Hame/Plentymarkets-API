/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ImageMarketAttributeValue image market attribute value model
type ImageMarketAttributeValue struct {
	ValueId *string `json:"valueId,omitempty"`
	AttributeId *string `json:"attributeId,omitempty"`
	ImageId *string `json:"imageId,omitempty"`
	ItemId *string `json:"itemId,omitempty"`
}

// NewImageMarketAttributeValue instantiates a new ImageMarketAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageMarketAttributeValue() *ImageMarketAttributeValue {
	this := ImageMarketAttributeValue{}
	return &this
}

// NewImageMarketAttributeValueWithDefaults instantiates a new ImageMarketAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageMarketAttributeValueWithDefaults() *ImageMarketAttributeValue {
	this := ImageMarketAttributeValue{}
	return &this
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *ImageMarketAttributeValue) GetValueId() string {
	if o == nil || o.ValueId == nil {
		var ret string
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMarketAttributeValue) GetValueIdOk() (*string, bool) {
	if o == nil || o.ValueId == nil {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *ImageMarketAttributeValue) HasValueId() bool {
	if o != nil && o.ValueId != nil {
		return true
	}

	return false
}

// SetValueId gets a reference to the given string and assigns it to the ValueId field.
func (o *ImageMarketAttributeValue) SetValueId(v string) {
	o.ValueId = &v
}

// GetAttributeId returns the AttributeId field value if set, zero value otherwise.
func (o *ImageMarketAttributeValue) GetAttributeId() string {
	if o == nil || o.AttributeId == nil {
		var ret string
		return ret
	}
	return *o.AttributeId
}

// GetAttributeIdOk returns a tuple with the AttributeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMarketAttributeValue) GetAttributeIdOk() (*string, bool) {
	if o == nil || o.AttributeId == nil {
		return nil, false
	}
	return o.AttributeId, true
}

// HasAttributeId returns a boolean if a field has been set.
func (o *ImageMarketAttributeValue) HasAttributeId() bool {
	if o != nil && o.AttributeId != nil {
		return true
	}

	return false
}

// SetAttributeId gets a reference to the given string and assigns it to the AttributeId field.
func (o *ImageMarketAttributeValue) SetAttributeId(v string) {
	o.AttributeId = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *ImageMarketAttributeValue) GetImageId() string {
	if o == nil || o.ImageId == nil {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMarketAttributeValue) GetImageIdOk() (*string, bool) {
	if o == nil || o.ImageId == nil {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *ImageMarketAttributeValue) HasImageId() bool {
	if o != nil && o.ImageId != nil {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *ImageMarketAttributeValue) SetImageId(v string) {
	o.ImageId = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ImageMarketAttributeValue) GetItemId() string {
	if o == nil || o.ItemId == nil {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMarketAttributeValue) GetItemIdOk() (*string, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ImageMarketAttributeValue) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ImageMarketAttributeValue) SetItemId(v string) {
	o.ItemId = &v
}

func (o ImageMarketAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ValueId != nil {
		toSerialize["valueId"] = o.ValueId
	}
	if o.AttributeId != nil {
		toSerialize["attributeId"] = o.AttributeId
	}
	if o.ImageId != nil {
		toSerialize["imageId"] = o.ImageId
	}
	if o.ItemId != nil {
		toSerialize["itemId"] = o.ItemId
	}
	return json.Marshal(toSerialize)
}

type NullableImageMarketAttributeValue struct {
	value *ImageMarketAttributeValue
	isSet bool
}

func (v NullableImageMarketAttributeValue) Get() *ImageMarketAttributeValue {
	return v.value
}

func (v *NullableImageMarketAttributeValue) Set(val *ImageMarketAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableImageMarketAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableImageMarketAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageMarketAttributeValue(val *ImageMarketAttributeValue) *NullableImageMarketAttributeValue {
	return &NullableImageMarketAttributeValue{value: val, isSet: true}
}

func (v NullableImageMarketAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageMarketAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


