/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
	"fmt"
)

// CreateItemsResponse - struct for CreateItemsResponse
type CreateItemsResponse struct {
	Item *Item
	MultipleItemsCreatedResponse *MultipleItemsCreatedResponse
}

// ItemAsCreateItemsResponse is a convenience function that returns Item wrapped in CreateItemsResponse
func ItemAsCreateItemsResponse(v *Item) CreateItemsResponse {
	return CreateItemsResponse{ Item: v}
}

// MultipleItemsCreatedResponseAsCreateItemsResponse is a convenience function that returns MultipleItemsCreatedResponse wrapped in CreateItemsResponse
func MultipleItemsCreatedResponseAsCreateItemsResponse(v *MultipleItemsCreatedResponse) CreateItemsResponse {
	return CreateItemsResponse{ MultipleItemsCreatedResponse: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateItemsResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Item
	err = json.Unmarshal(data, &dst.Item)
	if err == nil {
		jsonItem, _ := json.Marshal(dst.Item)
		if string(jsonItem) == "{}" { // empty struct
			dst.Item = nil
		} else {
			match++
		}
	} else {
		dst.Item = nil
	}

	// try to unmarshal data into MultipleItemsCreatedResponse
	err = json.Unmarshal(data, &dst.MultipleItemsCreatedResponse)
	if err == nil {
		jsonMultipleItemsCreatedResponse, _ := json.Marshal(dst.MultipleItemsCreatedResponse)
		if string(jsonMultipleItemsCreatedResponse) == "{}" { // empty struct
			dst.MultipleItemsCreatedResponse = nil
		} else {
			match++
		}
	} else {
		dst.MultipleItemsCreatedResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Item = nil
		dst.MultipleItemsCreatedResponse = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CreateItemsResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CreateItemsResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateItemsResponse) MarshalJSON() ([]byte, error) {
	if src.Item != nil {
		return json.Marshal(&src.Item)
	}

	if src.MultipleItemsCreatedResponse != nil {
		return json.Marshal(&src.MultipleItemsCreatedResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateItemsResponse) GetActualInstance() (interface{}) {
	if obj.Item != nil {
		return obj.Item
	}

	if obj.MultipleItemsCreatedResponse != nil {
		return obj.MultipleItemsCreatedResponse
	}

	// all schemas are nil
	return nil
}

type NullableCreateItemsResponse struct {
	value *CreateItemsResponse
	isSet bool
}

func (v NullableCreateItemsResponse) Get() *CreateItemsResponse {
	return v.value
}

func (v *NullableCreateItemsResponse) Set(val *CreateItemsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateItemsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateItemsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateItemsResponse(val *CreateItemsResponse) *NullableCreateItemsResponse {
	return &NullableCreateItemsResponse{value: val, isSet: true}
}

func (v NullableCreateItemsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateItemsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


