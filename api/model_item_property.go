/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ItemProperty struct for ItemProperty
type ItemProperty struct {
	Id *int32 `json:"id,omitempty"`
	ItemId *int32 `json:"itemId,omitempty"`
	PropertyId *int32 `json:"propertyId,omitempty"`
	PropertySelectionId *int32 `json:"propertySelectionId,omitempty"`
	ValueInt *int32 `json:"valueInt,omitempty"`
	ValueFloat *float32 `json:"valueFloat,omitempty"`
	Valuefile *string `json:"valuefile,omitempty"`
	Surcharge *float32 `json:"surcharge,omitempty"`
}

// NewItemProperty instantiates a new ItemProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemProperty() *ItemProperty {
	this := ItemProperty{}
	return &this
}

// NewItemPropertyWithDefaults instantiates a new ItemProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemPropertyWithDefaults() *ItemProperty {
	this := ItemProperty{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ItemProperty) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ItemProperty) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ItemProperty) SetId(v int32) {
	o.Id = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ItemProperty) GetItemId() int32 {
	if o == nil || o.ItemId == nil {
		var ret int32
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetItemIdOk() (*int32, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ItemProperty) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int32 and assigns it to the ItemId field.
func (o *ItemProperty) SetItemId(v int32) {
	o.ItemId = &v
}

// GetPropertyId returns the PropertyId field value if set, zero value otherwise.
func (o *ItemProperty) GetPropertyId() int32 {
	if o == nil || o.PropertyId == nil {
		var ret int32
		return ret
	}
	return *o.PropertyId
}

// GetPropertyIdOk returns a tuple with the PropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetPropertyIdOk() (*int32, bool) {
	if o == nil || o.PropertyId == nil {
		return nil, false
	}
	return o.PropertyId, true
}

// HasPropertyId returns a boolean if a field has been set.
func (o *ItemProperty) HasPropertyId() bool {
	if o != nil && o.PropertyId != nil {
		return true
	}

	return false
}

// SetPropertyId gets a reference to the given int32 and assigns it to the PropertyId field.
func (o *ItemProperty) SetPropertyId(v int32) {
	o.PropertyId = &v
}

// GetPropertySelectionId returns the PropertySelectionId field value if set, zero value otherwise.
func (o *ItemProperty) GetPropertySelectionId() int32 {
	if o == nil || o.PropertySelectionId == nil {
		var ret int32
		return ret
	}
	return *o.PropertySelectionId
}

// GetPropertySelectionIdOk returns a tuple with the PropertySelectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetPropertySelectionIdOk() (*int32, bool) {
	if o == nil || o.PropertySelectionId == nil {
		return nil, false
	}
	return o.PropertySelectionId, true
}

// HasPropertySelectionId returns a boolean if a field has been set.
func (o *ItemProperty) HasPropertySelectionId() bool {
	if o != nil && o.PropertySelectionId != nil {
		return true
	}

	return false
}

// SetPropertySelectionId gets a reference to the given int32 and assigns it to the PropertySelectionId field.
func (o *ItemProperty) SetPropertySelectionId(v int32) {
	o.PropertySelectionId = &v
}

// GetValueInt returns the ValueInt field value if set, zero value otherwise.
func (o *ItemProperty) GetValueInt() int32 {
	if o == nil || o.ValueInt == nil {
		var ret int32
		return ret
	}
	return *o.ValueInt
}

// GetValueIntOk returns a tuple with the ValueInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetValueIntOk() (*int32, bool) {
	if o == nil || o.ValueInt == nil {
		return nil, false
	}
	return o.ValueInt, true
}

// HasValueInt returns a boolean if a field has been set.
func (o *ItemProperty) HasValueInt() bool {
	if o != nil && o.ValueInt != nil {
		return true
	}

	return false
}

// SetValueInt gets a reference to the given int32 and assigns it to the ValueInt field.
func (o *ItemProperty) SetValueInt(v int32) {
	o.ValueInt = &v
}

// GetValueFloat returns the ValueFloat field value if set, zero value otherwise.
func (o *ItemProperty) GetValueFloat() float32 {
	if o == nil || o.ValueFloat == nil {
		var ret float32
		return ret
	}
	return *o.ValueFloat
}

// GetValueFloatOk returns a tuple with the ValueFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetValueFloatOk() (*float32, bool) {
	if o == nil || o.ValueFloat == nil {
		return nil, false
	}
	return o.ValueFloat, true
}

// HasValueFloat returns a boolean if a field has been set.
func (o *ItemProperty) HasValueFloat() bool {
	if o != nil && o.ValueFloat != nil {
		return true
	}

	return false
}

// SetValueFloat gets a reference to the given float32 and assigns it to the ValueFloat field.
func (o *ItemProperty) SetValueFloat(v float32) {
	o.ValueFloat = &v
}

// GetValuefile returns the Valuefile field value if set, zero value otherwise.
func (o *ItemProperty) GetValuefile() string {
	if o == nil || o.Valuefile == nil {
		var ret string
		return ret
	}
	return *o.Valuefile
}

// GetValuefileOk returns a tuple with the Valuefile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetValuefileOk() (*string, bool) {
	if o == nil || o.Valuefile == nil {
		return nil, false
	}
	return o.Valuefile, true
}

// HasValuefile returns a boolean if a field has been set.
func (o *ItemProperty) HasValuefile() bool {
	if o != nil && o.Valuefile != nil {
		return true
	}

	return false
}

// SetValuefile gets a reference to the given string and assigns it to the Valuefile field.
func (o *ItemProperty) SetValuefile(v string) {
	o.Valuefile = &v
}

// GetSurcharge returns the Surcharge field value if set, zero value otherwise.
func (o *ItemProperty) GetSurcharge() float32 {
	if o == nil || o.Surcharge == nil {
		var ret float32
		return ret
	}
	return *o.Surcharge
}

// GetSurchargeOk returns a tuple with the Surcharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemProperty) GetSurchargeOk() (*float32, bool) {
	if o == nil || o.Surcharge == nil {
		return nil, false
	}
	return o.Surcharge, true
}

// HasSurcharge returns a boolean if a field has been set.
func (o *ItemProperty) HasSurcharge() bool {
	if o != nil && o.Surcharge != nil {
		return true
	}

	return false
}

// SetSurcharge gets a reference to the given float32 and assigns it to the Surcharge field.
func (o *ItemProperty) SetSurcharge(v float32) {
	o.Surcharge = &v
}

func (o ItemProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ItemId != nil {
		toSerialize["itemId"] = o.ItemId
	}
	if o.PropertyId != nil {
		toSerialize["propertyId"] = o.PropertyId
	}
	if o.PropertySelectionId != nil {
		toSerialize["propertySelectionId"] = o.PropertySelectionId
	}
	if o.ValueInt != nil {
		toSerialize["valueInt"] = o.ValueInt
	}
	if o.ValueFloat != nil {
		toSerialize["valueFloat"] = o.ValueFloat
	}
	if o.Valuefile != nil {
		toSerialize["valuefile"] = o.Valuefile
	}
	if o.Surcharge != nil {
		toSerialize["surcharge"] = o.Surcharge
	}
	return json.Marshal(toSerialize)
}

type NullableItemProperty struct {
	value *ItemProperty
	isSet bool
}

func (v NullableItemProperty) Get() *ItemProperty {
	return v.value
}

func (v *NullableItemProperty) Set(val *ItemProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableItemProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableItemProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemProperty(val *ItemProperty) *NullableItemProperty {
	return &NullableItemProperty{value: val, isSet: true}
}

func (v NullableItemProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


