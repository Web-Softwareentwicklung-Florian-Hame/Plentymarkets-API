/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PimVariation struct for PimVariation
type PimVariation struct {
	// The id of the variation. optional
	Id *int32 `json:"id,omitempty"`
	AdditionalSkus *[]PimVariationAdditionalSku `json:"additionalSkus,omitempty"`
	AttributeValues *[]VariationAttributeValue `json:"attributeValues,omitempty"`
	Barcodes *[]VariationBarcode `json:"barcodes,omitempty"`
	BundleComponents *[]PimVariationBundleComponent `json:"bundleComponents,omitempty"`
	Categories *[]VariationCategory `json:"categories,omitempty"`
	Clients *[]VariationClient `json:"clients,omitempty"`
	DefaultCategories *[]VariationDefaultCategory `json:"defaultCategories,omitempty"`
	Images *[]VariationImage `json:"images,omitempty"`
	Markets *[]VariationMarket `json:"markets,omitempty"`
	MarketIdentNumbers *[]VariationMarketItemNumber `json:"marketIdentNumbers,omitempty"`
	SalesPrices *[]VariationSalesPrice `json:"salesPrices,omitempty"`
	Skus *[]VariationSku `json:"skus,omitempty"`
	Supplier *[]VariationSupplier `json:"supplier,omitempty"`
	Warehouses *[]PimVariationWarehouse `json:"warehouses,omitempty"`
	Properties *[]PimVariationProperty `json:"properties,omitempty"`
	Tags *[]PimVariationTag `json:"tags,omitempty"`
	Comments *[]PimVariationComment `json:"comments,omitempty"`
	Unit *PimVariationUnit `json:"unit,omitempty"`
	Base *PimVariationBase `json:"base,omitempty"`
}

// NewPimVariation instantiates a new PimVariation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPimVariation() *PimVariation {
	this := PimVariation{}
	return &this
}

// NewPimVariationWithDefaults instantiates a new PimVariation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPimVariationWithDefaults() *PimVariation {
	this := PimVariation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PimVariation) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PimVariation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PimVariation) SetId(v int32) {
	o.Id = &v
}

// GetAdditionalSkus returns the AdditionalSkus field value if set, zero value otherwise.
func (o *PimVariation) GetAdditionalSkus() []PimVariationAdditionalSku {
	if o == nil || o.AdditionalSkus == nil {
		var ret []PimVariationAdditionalSku
		return ret
	}
	return *o.AdditionalSkus
}

// GetAdditionalSkusOk returns a tuple with the AdditionalSkus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetAdditionalSkusOk() (*[]PimVariationAdditionalSku, bool) {
	if o == nil || o.AdditionalSkus == nil {
		return nil, false
	}
	return o.AdditionalSkus, true
}

// HasAdditionalSkus returns a boolean if a field has been set.
func (o *PimVariation) HasAdditionalSkus() bool {
	if o != nil && o.AdditionalSkus != nil {
		return true
	}

	return false
}

// SetAdditionalSkus gets a reference to the given []PimVariationAdditionalSku and assigns it to the AdditionalSkus field.
func (o *PimVariation) SetAdditionalSkus(v []PimVariationAdditionalSku) {
	o.AdditionalSkus = &v
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise.
func (o *PimVariation) GetAttributeValues() []VariationAttributeValue {
	if o == nil || o.AttributeValues == nil {
		var ret []VariationAttributeValue
		return ret
	}
	return *o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetAttributeValuesOk() (*[]VariationAttributeValue, bool) {
	if o == nil || o.AttributeValues == nil {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *PimVariation) HasAttributeValues() bool {
	if o != nil && o.AttributeValues != nil {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []VariationAttributeValue and assigns it to the AttributeValues field.
func (o *PimVariation) SetAttributeValues(v []VariationAttributeValue) {
	o.AttributeValues = &v
}

// GetBarcodes returns the Barcodes field value if set, zero value otherwise.
func (o *PimVariation) GetBarcodes() []VariationBarcode {
	if o == nil || o.Barcodes == nil {
		var ret []VariationBarcode
		return ret
	}
	return *o.Barcodes
}

// GetBarcodesOk returns a tuple with the Barcodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetBarcodesOk() (*[]VariationBarcode, bool) {
	if o == nil || o.Barcodes == nil {
		return nil, false
	}
	return o.Barcodes, true
}

// HasBarcodes returns a boolean if a field has been set.
func (o *PimVariation) HasBarcodes() bool {
	if o != nil && o.Barcodes != nil {
		return true
	}

	return false
}

// SetBarcodes gets a reference to the given []VariationBarcode and assigns it to the Barcodes field.
func (o *PimVariation) SetBarcodes(v []VariationBarcode) {
	o.Barcodes = &v
}

// GetBundleComponents returns the BundleComponents field value if set, zero value otherwise.
func (o *PimVariation) GetBundleComponents() []PimVariationBundleComponent {
	if o == nil || o.BundleComponents == nil {
		var ret []PimVariationBundleComponent
		return ret
	}
	return *o.BundleComponents
}

// GetBundleComponentsOk returns a tuple with the BundleComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetBundleComponentsOk() (*[]PimVariationBundleComponent, bool) {
	if o == nil || o.BundleComponents == nil {
		return nil, false
	}
	return o.BundleComponents, true
}

// HasBundleComponents returns a boolean if a field has been set.
func (o *PimVariation) HasBundleComponents() bool {
	if o != nil && o.BundleComponents != nil {
		return true
	}

	return false
}

// SetBundleComponents gets a reference to the given []PimVariationBundleComponent and assigns it to the BundleComponents field.
func (o *PimVariation) SetBundleComponents(v []PimVariationBundleComponent) {
	o.BundleComponents = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *PimVariation) GetCategories() []VariationCategory {
	if o == nil || o.Categories == nil {
		var ret []VariationCategory
		return ret
	}
	return *o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetCategoriesOk() (*[]VariationCategory, bool) {
	if o == nil || o.Categories == nil {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *PimVariation) HasCategories() bool {
	if o != nil && o.Categories != nil {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []VariationCategory and assigns it to the Categories field.
func (o *PimVariation) SetCategories(v []VariationCategory) {
	o.Categories = &v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *PimVariation) GetClients() []VariationClient {
	if o == nil || o.Clients == nil {
		var ret []VariationClient
		return ret
	}
	return *o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetClientsOk() (*[]VariationClient, bool) {
	if o == nil || o.Clients == nil {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *PimVariation) HasClients() bool {
	if o != nil && o.Clients != nil {
		return true
	}

	return false
}

// SetClients gets a reference to the given []VariationClient and assigns it to the Clients field.
func (o *PimVariation) SetClients(v []VariationClient) {
	o.Clients = &v
}

// GetDefaultCategories returns the DefaultCategories field value if set, zero value otherwise.
func (o *PimVariation) GetDefaultCategories() []VariationDefaultCategory {
	if o == nil || o.DefaultCategories == nil {
		var ret []VariationDefaultCategory
		return ret
	}
	return *o.DefaultCategories
}

// GetDefaultCategoriesOk returns a tuple with the DefaultCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetDefaultCategoriesOk() (*[]VariationDefaultCategory, bool) {
	if o == nil || o.DefaultCategories == nil {
		return nil, false
	}
	return o.DefaultCategories, true
}

// HasDefaultCategories returns a boolean if a field has been set.
func (o *PimVariation) HasDefaultCategories() bool {
	if o != nil && o.DefaultCategories != nil {
		return true
	}

	return false
}

// SetDefaultCategories gets a reference to the given []VariationDefaultCategory and assigns it to the DefaultCategories field.
func (o *PimVariation) SetDefaultCategories(v []VariationDefaultCategory) {
	o.DefaultCategories = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *PimVariation) GetImages() []VariationImage {
	if o == nil || o.Images == nil {
		var ret []VariationImage
		return ret
	}
	return *o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetImagesOk() (*[]VariationImage, bool) {
	if o == nil || o.Images == nil {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *PimVariation) HasImages() bool {
	if o != nil && o.Images != nil {
		return true
	}

	return false
}

// SetImages gets a reference to the given []VariationImage and assigns it to the Images field.
func (o *PimVariation) SetImages(v []VariationImage) {
	o.Images = &v
}

// GetMarkets returns the Markets field value if set, zero value otherwise.
func (o *PimVariation) GetMarkets() []VariationMarket {
	if o == nil || o.Markets == nil {
		var ret []VariationMarket
		return ret
	}
	return *o.Markets
}

// GetMarketsOk returns a tuple with the Markets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetMarketsOk() (*[]VariationMarket, bool) {
	if o == nil || o.Markets == nil {
		return nil, false
	}
	return o.Markets, true
}

// HasMarkets returns a boolean if a field has been set.
func (o *PimVariation) HasMarkets() bool {
	if o != nil && o.Markets != nil {
		return true
	}

	return false
}

// SetMarkets gets a reference to the given []VariationMarket and assigns it to the Markets field.
func (o *PimVariation) SetMarkets(v []VariationMarket) {
	o.Markets = &v
}

// GetMarketIdentNumbers returns the MarketIdentNumbers field value if set, zero value otherwise.
func (o *PimVariation) GetMarketIdentNumbers() []VariationMarketItemNumber {
	if o == nil || o.MarketIdentNumbers == nil {
		var ret []VariationMarketItemNumber
		return ret
	}
	return *o.MarketIdentNumbers
}

// GetMarketIdentNumbersOk returns a tuple with the MarketIdentNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetMarketIdentNumbersOk() (*[]VariationMarketItemNumber, bool) {
	if o == nil || o.MarketIdentNumbers == nil {
		return nil, false
	}
	return o.MarketIdentNumbers, true
}

// HasMarketIdentNumbers returns a boolean if a field has been set.
func (o *PimVariation) HasMarketIdentNumbers() bool {
	if o != nil && o.MarketIdentNumbers != nil {
		return true
	}

	return false
}

// SetMarketIdentNumbers gets a reference to the given []VariationMarketItemNumber and assigns it to the MarketIdentNumbers field.
func (o *PimVariation) SetMarketIdentNumbers(v []VariationMarketItemNumber) {
	o.MarketIdentNumbers = &v
}

// GetSalesPrices returns the SalesPrices field value if set, zero value otherwise.
func (o *PimVariation) GetSalesPrices() []VariationSalesPrice {
	if o == nil || o.SalesPrices == nil {
		var ret []VariationSalesPrice
		return ret
	}
	return *o.SalesPrices
}

// GetSalesPricesOk returns a tuple with the SalesPrices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetSalesPricesOk() (*[]VariationSalesPrice, bool) {
	if o == nil || o.SalesPrices == nil {
		return nil, false
	}
	return o.SalesPrices, true
}

// HasSalesPrices returns a boolean if a field has been set.
func (o *PimVariation) HasSalesPrices() bool {
	if o != nil && o.SalesPrices != nil {
		return true
	}

	return false
}

// SetSalesPrices gets a reference to the given []VariationSalesPrice and assigns it to the SalesPrices field.
func (o *PimVariation) SetSalesPrices(v []VariationSalesPrice) {
	o.SalesPrices = &v
}

// GetSkus returns the Skus field value if set, zero value otherwise.
func (o *PimVariation) GetSkus() []VariationSku {
	if o == nil || o.Skus == nil {
		var ret []VariationSku
		return ret
	}
	return *o.Skus
}

// GetSkusOk returns a tuple with the Skus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetSkusOk() (*[]VariationSku, bool) {
	if o == nil || o.Skus == nil {
		return nil, false
	}
	return o.Skus, true
}

// HasSkus returns a boolean if a field has been set.
func (o *PimVariation) HasSkus() bool {
	if o != nil && o.Skus != nil {
		return true
	}

	return false
}

// SetSkus gets a reference to the given []VariationSku and assigns it to the Skus field.
func (o *PimVariation) SetSkus(v []VariationSku) {
	o.Skus = &v
}

// GetSupplier returns the Supplier field value if set, zero value otherwise.
func (o *PimVariation) GetSupplier() []VariationSupplier {
	if o == nil || o.Supplier == nil {
		var ret []VariationSupplier
		return ret
	}
	return *o.Supplier
}

// GetSupplierOk returns a tuple with the Supplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetSupplierOk() (*[]VariationSupplier, bool) {
	if o == nil || o.Supplier == nil {
		return nil, false
	}
	return o.Supplier, true
}

// HasSupplier returns a boolean if a field has been set.
func (o *PimVariation) HasSupplier() bool {
	if o != nil && o.Supplier != nil {
		return true
	}

	return false
}

// SetSupplier gets a reference to the given []VariationSupplier and assigns it to the Supplier field.
func (o *PimVariation) SetSupplier(v []VariationSupplier) {
	o.Supplier = &v
}

// GetWarehouses returns the Warehouses field value if set, zero value otherwise.
func (o *PimVariation) GetWarehouses() []PimVariationWarehouse {
	if o == nil || o.Warehouses == nil {
		var ret []PimVariationWarehouse
		return ret
	}
	return *o.Warehouses
}

// GetWarehousesOk returns a tuple with the Warehouses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetWarehousesOk() (*[]PimVariationWarehouse, bool) {
	if o == nil || o.Warehouses == nil {
		return nil, false
	}
	return o.Warehouses, true
}

// HasWarehouses returns a boolean if a field has been set.
func (o *PimVariation) HasWarehouses() bool {
	if o != nil && o.Warehouses != nil {
		return true
	}

	return false
}

// SetWarehouses gets a reference to the given []PimVariationWarehouse and assigns it to the Warehouses field.
func (o *PimVariation) SetWarehouses(v []PimVariationWarehouse) {
	o.Warehouses = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PimVariation) GetProperties() []PimVariationProperty {
	if o == nil || o.Properties == nil {
		var ret []PimVariationProperty
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetPropertiesOk() (*[]PimVariationProperty, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PimVariation) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []PimVariationProperty and assigns it to the Properties field.
func (o *PimVariation) SetProperties(v []PimVariationProperty) {
	o.Properties = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PimVariation) GetTags() []PimVariationTag {
	if o == nil || o.Tags == nil {
		var ret []PimVariationTag
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetTagsOk() (*[]PimVariationTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PimVariation) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []PimVariationTag and assigns it to the Tags field.
func (o *PimVariation) SetTags(v []PimVariationTag) {
	o.Tags = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *PimVariation) GetComments() []PimVariationComment {
	if o == nil || o.Comments == nil {
		var ret []PimVariationComment
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetCommentsOk() (*[]PimVariationComment, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *PimVariation) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given []PimVariationComment and assigns it to the Comments field.
func (o *PimVariation) SetComments(v []PimVariationComment) {
	o.Comments = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *PimVariation) GetUnit() PimVariationUnit {
	if o == nil || o.Unit == nil {
		var ret PimVariationUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetUnitOk() (*PimVariationUnit, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *PimVariation) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given PimVariationUnit and assigns it to the Unit field.
func (o *PimVariation) SetUnit(v PimVariationUnit) {
	o.Unit = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *PimVariation) GetBase() PimVariationBase {
	if o == nil || o.Base == nil {
		var ret PimVariationBase
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariation) GetBaseOk() (*PimVariationBase, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *PimVariation) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given PimVariationBase and assigns it to the Base field.
func (o *PimVariation) SetBase(v PimVariationBase) {
	o.Base = &v
}

func (o PimVariation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AdditionalSkus != nil {
		toSerialize["additionalSkus"] = o.AdditionalSkus
	}
	if o.AttributeValues != nil {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if o.Barcodes != nil {
		toSerialize["barcodes"] = o.Barcodes
	}
	if o.BundleComponents != nil {
		toSerialize["bundleComponents"] = o.BundleComponents
	}
	if o.Categories != nil {
		toSerialize["categories"] = o.Categories
	}
	if o.Clients != nil {
		toSerialize["clients"] = o.Clients
	}
	if o.DefaultCategories != nil {
		toSerialize["defaultCategories"] = o.DefaultCategories
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.Markets != nil {
		toSerialize["markets"] = o.Markets
	}
	if o.MarketIdentNumbers != nil {
		toSerialize["marketIdentNumbers"] = o.MarketIdentNumbers
	}
	if o.SalesPrices != nil {
		toSerialize["salesPrices"] = o.SalesPrices
	}
	if o.Skus != nil {
		toSerialize["skus"] = o.Skus
	}
	if o.Supplier != nil {
		toSerialize["supplier"] = o.Supplier
	}
	if o.Warehouses != nil {
		toSerialize["warehouses"] = o.Warehouses
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	return json.Marshal(toSerialize)
}

type NullablePimVariation struct {
	value *PimVariation
	isSet bool
}

func (v NullablePimVariation) Get() *PimVariation {
	return v.value
}

func (v *NullablePimVariation) Set(val *PimVariation) {
	v.value = val
	v.isSet = true
}

func (v NullablePimVariation) IsSet() bool {
	return v.isSet
}

func (v *NullablePimVariation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePimVariation(val *PimVariation) *NullablePimVariation {
	return &NullablePimVariation{value: val, isSet: true}
}

func (v NullablePimVariation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePimVariation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


