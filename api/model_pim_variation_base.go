/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"time"
)

// PimVariationBase struct for PimVariationBase
type PimVariationBase struct {
	IsMain *bool `json:"isMain,omitempty"`
	ItemId *int32 `json:"itemId,omitempty"`
	Position *int32 `json:"position,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
	Number *string `json:"number,omitempty"`
	Model *string `json:"model,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	Availability *int32 `json:"availability,omitempty"`
	EstimatedAvailableAt *time.Time `json:"estimatedAvailableAt,omitempty"`
	PurchasePrice *float32 `json:"purchasePrice,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	RelatedUpdatedAt *time.Time `json:"relatedUpdatedAt,omitempty"`
	PriceCalculationId *int32 `json:"priceCalculationId,omitempty"`
	Picking *string `json:"picking,omitempty"`
	StockLimitation *int32 `json:"stockLimitation,omitempty"`
	IsVisibleIfNetStockIsPositive *bool `json:"isVisibleIfNetStockIsPositive,omitempty"`
	IsInvisibleIfNetStockIsNotPositive *bool `json:"isInvisibleIfNetStockIsNotPositive,omitempty"`
	IsAvailableIfNetStockIsPositive *bool `json:"isAvailableIfNetStockIsPositive,omitempty"`
	IsUnavailableIfNetStockIsNotPositive *bool `json:"isUnavailableIfNetStockIsNotPositive,omitempty"`
	MainWarehouseId *int32 `json:"mainWarehouseId,omitempty"`
	MaximumOrderQuantity *float32 `json:"maximumOrderQuantity,omitempty"`
	MinimumOrderQuantity *float32 `json:"minimumOrderQuantity,omitempty"`
	IntervalOrderQuantity *float32 `json:"intervalOrderQuantity,omitempty"`
	AvailableUntil *time.Time `json:"availableUntil,omitempty"`
	ReleasedAt *time.Time `json:"releasedAt,omitempty"`
	Name *string `json:"name,omitempty"`
	WeightG *int32 `json:"weightG,omitempty"`
	WeightNetG *int32 `json:"weightNetG,omitempty"`
	WidthMM *float32 `json:"widthMM,omitempty"`
	LengthMM *float32 `json:"lengthMM,omitempty"`
	HeightMM *float32 `json:"heightMM,omitempty"`
	ExtraShippingCharge1 *float32 `json:"extraShippingCharge1,omitempty"`
	ExtraShippingCharge2 *float32 `json:"extraShippingCharge2,omitempty"`
	UnitsContained *int32 `json:"unitsContained,omitempty"`
	PalletTypeId *int32 `json:"palletTypeId,omitempty"`
	PackingUnits *int32 `json:"packingUnits,omitempty"`
	PackingUnitTypeId *int32 `json:"packingUnitTypeId,omitempty"`
	TransportationCosts *float32 `json:"transportationCosts,omitempty"`
	StorageCosts *float32 `json:"storageCosts,omitempty"`
	Customs *float32 `json:"customs,omitempty"`
	OperatingCosts *float32 `json:"operatingCosts,omitempty"`
	VatId *int32 `json:"vatId,omitempty"`
	BundleType *string `json:"bundleType,omitempty"`
	AutomaticClientVisibility *int32 `json:"automaticClientVisibility,omitempty"`
	IsHiddenInCategoryList *bool `json:"isHiddenInCategoryList,omitempty"`
}

// NewPimVariationBase instantiates a new PimVariationBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPimVariationBase() *PimVariationBase {
	this := PimVariationBase{}
	return &this
}

// NewPimVariationBaseWithDefaults instantiates a new PimVariationBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPimVariationBaseWithDefaults() *PimVariationBase {
	this := PimVariationBase{}
	return &this
}

// GetIsMain returns the IsMain field value if set, zero value otherwise.
func (o *PimVariationBase) GetIsMain() bool {
	if o == nil || o.IsMain == nil {
		var ret bool
		return ret
	}
	return *o.IsMain
}

// GetIsMainOk returns a tuple with the IsMain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIsMainOk() (*bool, bool) {
	if o == nil || o.IsMain == nil {
		return nil, false
	}
	return o.IsMain, true
}

// HasIsMain returns a boolean if a field has been set.
func (o *PimVariationBase) HasIsMain() bool {
	if o != nil && o.IsMain != nil {
		return true
	}

	return false
}

// SetIsMain gets a reference to the given bool and assigns it to the IsMain field.
func (o *PimVariationBase) SetIsMain(v bool) {
	o.IsMain = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *PimVariationBase) GetItemId() int32 {
	if o == nil || o.ItemId == nil {
		var ret int32
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetItemIdOk() (*int32, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *PimVariationBase) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int32 and assigns it to the ItemId field.
func (o *PimVariationBase) SetItemId(v int32) {
	o.ItemId = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *PimVariationBase) GetPosition() int32 {
	if o == nil || o.Position == nil {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetPositionOk() (*int32, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *PimVariationBase) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *PimVariationBase) SetPosition(v int32) {
	o.Position = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *PimVariationBase) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *PimVariationBase) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *PimVariationBase) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *PimVariationBase) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetNumberOk() (*string, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *PimVariationBase) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *PimVariationBase) SetNumber(v string) {
	o.Number = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *PimVariationBase) GetModel() string {
	if o == nil || o.Model == nil {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetModelOk() (*string, bool) {
	if o == nil || o.Model == nil {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *PimVariationBase) HasModel() bool {
	if o != nil && o.Model != nil {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *PimVariationBase) SetModel(v string) {
	o.Model = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *PimVariationBase) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *PimVariationBase) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *PimVariationBase) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise.
func (o *PimVariationBase) GetAvailability() int32 {
	if o == nil || o.Availability == nil {
		var ret int32
		return ret
	}
	return *o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetAvailabilityOk() (*int32, bool) {
	if o == nil || o.Availability == nil {
		return nil, false
	}
	return o.Availability, true
}

// HasAvailability returns a boolean if a field has been set.
func (o *PimVariationBase) HasAvailability() bool {
	if o != nil && o.Availability != nil {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given int32 and assigns it to the Availability field.
func (o *PimVariationBase) SetAvailability(v int32) {
	o.Availability = &v
}

// GetEstimatedAvailableAt returns the EstimatedAvailableAt field value if set, zero value otherwise.
func (o *PimVariationBase) GetEstimatedAvailableAt() time.Time {
	if o == nil || o.EstimatedAvailableAt == nil {
		var ret time.Time
		return ret
	}
	return *o.EstimatedAvailableAt
}

// GetEstimatedAvailableAtOk returns a tuple with the EstimatedAvailableAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetEstimatedAvailableAtOk() (*time.Time, bool) {
	if o == nil || o.EstimatedAvailableAt == nil {
		return nil, false
	}
	return o.EstimatedAvailableAt, true
}

// HasEstimatedAvailableAt returns a boolean if a field has been set.
func (o *PimVariationBase) HasEstimatedAvailableAt() bool {
	if o != nil && o.EstimatedAvailableAt != nil {
		return true
	}

	return false
}

// SetEstimatedAvailableAt gets a reference to the given time.Time and assigns it to the EstimatedAvailableAt field.
func (o *PimVariationBase) SetEstimatedAvailableAt(v time.Time) {
	o.EstimatedAvailableAt = &v
}

// GetPurchasePrice returns the PurchasePrice field value if set, zero value otherwise.
func (o *PimVariationBase) GetPurchasePrice() float32 {
	if o == nil || o.PurchasePrice == nil {
		var ret float32
		return ret
	}
	return *o.PurchasePrice
}

// GetPurchasePriceOk returns a tuple with the PurchasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetPurchasePriceOk() (*float32, bool) {
	if o == nil || o.PurchasePrice == nil {
		return nil, false
	}
	return o.PurchasePrice, true
}

// HasPurchasePrice returns a boolean if a field has been set.
func (o *PimVariationBase) HasPurchasePrice() bool {
	if o != nil && o.PurchasePrice != nil {
		return true
	}

	return false
}

// SetPurchasePrice gets a reference to the given float32 and assigns it to the PurchasePrice field.
func (o *PimVariationBase) SetPurchasePrice(v float32) {
	o.PurchasePrice = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PimVariationBase) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PimVariationBase) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PimVariationBase) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PimVariationBase) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PimVariationBase) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PimVariationBase) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetRelatedUpdatedAt returns the RelatedUpdatedAt field value if set, zero value otherwise.
func (o *PimVariationBase) GetRelatedUpdatedAt() time.Time {
	if o == nil || o.RelatedUpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RelatedUpdatedAt
}

// GetRelatedUpdatedAtOk returns a tuple with the RelatedUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetRelatedUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.RelatedUpdatedAt == nil {
		return nil, false
	}
	return o.RelatedUpdatedAt, true
}

// HasRelatedUpdatedAt returns a boolean if a field has been set.
func (o *PimVariationBase) HasRelatedUpdatedAt() bool {
	if o != nil && o.RelatedUpdatedAt != nil {
		return true
	}

	return false
}

// SetRelatedUpdatedAt gets a reference to the given time.Time and assigns it to the RelatedUpdatedAt field.
func (o *PimVariationBase) SetRelatedUpdatedAt(v time.Time) {
	o.RelatedUpdatedAt = &v
}

// GetPriceCalculationId returns the PriceCalculationId field value if set, zero value otherwise.
func (o *PimVariationBase) GetPriceCalculationId() int32 {
	if o == nil || o.PriceCalculationId == nil {
		var ret int32
		return ret
	}
	return *o.PriceCalculationId
}

// GetPriceCalculationIdOk returns a tuple with the PriceCalculationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetPriceCalculationIdOk() (*int32, bool) {
	if o == nil || o.PriceCalculationId == nil {
		return nil, false
	}
	return o.PriceCalculationId, true
}

// HasPriceCalculationId returns a boolean if a field has been set.
func (o *PimVariationBase) HasPriceCalculationId() bool {
	if o != nil && o.PriceCalculationId != nil {
		return true
	}

	return false
}

// SetPriceCalculationId gets a reference to the given int32 and assigns it to the PriceCalculationId field.
func (o *PimVariationBase) SetPriceCalculationId(v int32) {
	o.PriceCalculationId = &v
}

// GetPicking returns the Picking field value if set, zero value otherwise.
func (o *PimVariationBase) GetPicking() string {
	if o == nil || o.Picking == nil {
		var ret string
		return ret
	}
	return *o.Picking
}

// GetPickingOk returns a tuple with the Picking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetPickingOk() (*string, bool) {
	if o == nil || o.Picking == nil {
		return nil, false
	}
	return o.Picking, true
}

// HasPicking returns a boolean if a field has been set.
func (o *PimVariationBase) HasPicking() bool {
	if o != nil && o.Picking != nil {
		return true
	}

	return false
}

// SetPicking gets a reference to the given string and assigns it to the Picking field.
func (o *PimVariationBase) SetPicking(v string) {
	o.Picking = &v
}

// GetStockLimitation returns the StockLimitation field value if set, zero value otherwise.
func (o *PimVariationBase) GetStockLimitation() int32 {
	if o == nil || o.StockLimitation == nil {
		var ret int32
		return ret
	}
	return *o.StockLimitation
}

// GetStockLimitationOk returns a tuple with the StockLimitation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetStockLimitationOk() (*int32, bool) {
	if o == nil || o.StockLimitation == nil {
		return nil, false
	}
	return o.StockLimitation, true
}

// HasStockLimitation returns a boolean if a field has been set.
func (o *PimVariationBase) HasStockLimitation() bool {
	if o != nil && o.StockLimitation != nil {
		return true
	}

	return false
}

// SetStockLimitation gets a reference to the given int32 and assigns it to the StockLimitation field.
func (o *PimVariationBase) SetStockLimitation(v int32) {
	o.StockLimitation = &v
}

// GetIsVisibleIfNetStockIsPositive returns the IsVisibleIfNetStockIsPositive field value if set, zero value otherwise.
func (o *PimVariationBase) GetIsVisibleIfNetStockIsPositive() bool {
	if o == nil || o.IsVisibleIfNetStockIsPositive == nil {
		var ret bool
		return ret
	}
	return *o.IsVisibleIfNetStockIsPositive
}

// GetIsVisibleIfNetStockIsPositiveOk returns a tuple with the IsVisibleIfNetStockIsPositive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIsVisibleIfNetStockIsPositiveOk() (*bool, bool) {
	if o == nil || o.IsVisibleIfNetStockIsPositive == nil {
		return nil, false
	}
	return o.IsVisibleIfNetStockIsPositive, true
}

// HasIsVisibleIfNetStockIsPositive returns a boolean if a field has been set.
func (o *PimVariationBase) HasIsVisibleIfNetStockIsPositive() bool {
	if o != nil && o.IsVisibleIfNetStockIsPositive != nil {
		return true
	}

	return false
}

// SetIsVisibleIfNetStockIsPositive gets a reference to the given bool and assigns it to the IsVisibleIfNetStockIsPositive field.
func (o *PimVariationBase) SetIsVisibleIfNetStockIsPositive(v bool) {
	o.IsVisibleIfNetStockIsPositive = &v
}

// GetIsInvisibleIfNetStockIsNotPositive returns the IsInvisibleIfNetStockIsNotPositive field value if set, zero value otherwise.
func (o *PimVariationBase) GetIsInvisibleIfNetStockIsNotPositive() bool {
	if o == nil || o.IsInvisibleIfNetStockIsNotPositive == nil {
		var ret bool
		return ret
	}
	return *o.IsInvisibleIfNetStockIsNotPositive
}

// GetIsInvisibleIfNetStockIsNotPositiveOk returns a tuple with the IsInvisibleIfNetStockIsNotPositive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIsInvisibleIfNetStockIsNotPositiveOk() (*bool, bool) {
	if o == nil || o.IsInvisibleIfNetStockIsNotPositive == nil {
		return nil, false
	}
	return o.IsInvisibleIfNetStockIsNotPositive, true
}

// HasIsInvisibleIfNetStockIsNotPositive returns a boolean if a field has been set.
func (o *PimVariationBase) HasIsInvisibleIfNetStockIsNotPositive() bool {
	if o != nil && o.IsInvisibleIfNetStockIsNotPositive != nil {
		return true
	}

	return false
}

// SetIsInvisibleIfNetStockIsNotPositive gets a reference to the given bool and assigns it to the IsInvisibleIfNetStockIsNotPositive field.
func (o *PimVariationBase) SetIsInvisibleIfNetStockIsNotPositive(v bool) {
	o.IsInvisibleIfNetStockIsNotPositive = &v
}

// GetIsAvailableIfNetStockIsPositive returns the IsAvailableIfNetStockIsPositive field value if set, zero value otherwise.
func (o *PimVariationBase) GetIsAvailableIfNetStockIsPositive() bool {
	if o == nil || o.IsAvailableIfNetStockIsPositive == nil {
		var ret bool
		return ret
	}
	return *o.IsAvailableIfNetStockIsPositive
}

// GetIsAvailableIfNetStockIsPositiveOk returns a tuple with the IsAvailableIfNetStockIsPositive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIsAvailableIfNetStockIsPositiveOk() (*bool, bool) {
	if o == nil || o.IsAvailableIfNetStockIsPositive == nil {
		return nil, false
	}
	return o.IsAvailableIfNetStockIsPositive, true
}

// HasIsAvailableIfNetStockIsPositive returns a boolean if a field has been set.
func (o *PimVariationBase) HasIsAvailableIfNetStockIsPositive() bool {
	if o != nil && o.IsAvailableIfNetStockIsPositive != nil {
		return true
	}

	return false
}

// SetIsAvailableIfNetStockIsPositive gets a reference to the given bool and assigns it to the IsAvailableIfNetStockIsPositive field.
func (o *PimVariationBase) SetIsAvailableIfNetStockIsPositive(v bool) {
	o.IsAvailableIfNetStockIsPositive = &v
}

// GetIsUnavailableIfNetStockIsNotPositive returns the IsUnavailableIfNetStockIsNotPositive field value if set, zero value otherwise.
func (o *PimVariationBase) GetIsUnavailableIfNetStockIsNotPositive() bool {
	if o == nil || o.IsUnavailableIfNetStockIsNotPositive == nil {
		var ret bool
		return ret
	}
	return *o.IsUnavailableIfNetStockIsNotPositive
}

// GetIsUnavailableIfNetStockIsNotPositiveOk returns a tuple with the IsUnavailableIfNetStockIsNotPositive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIsUnavailableIfNetStockIsNotPositiveOk() (*bool, bool) {
	if o == nil || o.IsUnavailableIfNetStockIsNotPositive == nil {
		return nil, false
	}
	return o.IsUnavailableIfNetStockIsNotPositive, true
}

// HasIsUnavailableIfNetStockIsNotPositive returns a boolean if a field has been set.
func (o *PimVariationBase) HasIsUnavailableIfNetStockIsNotPositive() bool {
	if o != nil && o.IsUnavailableIfNetStockIsNotPositive != nil {
		return true
	}

	return false
}

// SetIsUnavailableIfNetStockIsNotPositive gets a reference to the given bool and assigns it to the IsUnavailableIfNetStockIsNotPositive field.
func (o *PimVariationBase) SetIsUnavailableIfNetStockIsNotPositive(v bool) {
	o.IsUnavailableIfNetStockIsNotPositive = &v
}

// GetMainWarehouseId returns the MainWarehouseId field value if set, zero value otherwise.
func (o *PimVariationBase) GetMainWarehouseId() int32 {
	if o == nil || o.MainWarehouseId == nil {
		var ret int32
		return ret
	}
	return *o.MainWarehouseId
}

// GetMainWarehouseIdOk returns a tuple with the MainWarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetMainWarehouseIdOk() (*int32, bool) {
	if o == nil || o.MainWarehouseId == nil {
		return nil, false
	}
	return o.MainWarehouseId, true
}

// HasMainWarehouseId returns a boolean if a field has been set.
func (o *PimVariationBase) HasMainWarehouseId() bool {
	if o != nil && o.MainWarehouseId != nil {
		return true
	}

	return false
}

// SetMainWarehouseId gets a reference to the given int32 and assigns it to the MainWarehouseId field.
func (o *PimVariationBase) SetMainWarehouseId(v int32) {
	o.MainWarehouseId = &v
}

// GetMaximumOrderQuantity returns the MaximumOrderQuantity field value if set, zero value otherwise.
func (o *PimVariationBase) GetMaximumOrderQuantity() float32 {
	if o == nil || o.MaximumOrderQuantity == nil {
		var ret float32
		return ret
	}
	return *o.MaximumOrderQuantity
}

// GetMaximumOrderQuantityOk returns a tuple with the MaximumOrderQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetMaximumOrderQuantityOk() (*float32, bool) {
	if o == nil || o.MaximumOrderQuantity == nil {
		return nil, false
	}
	return o.MaximumOrderQuantity, true
}

// HasMaximumOrderQuantity returns a boolean if a field has been set.
func (o *PimVariationBase) HasMaximumOrderQuantity() bool {
	if o != nil && o.MaximumOrderQuantity != nil {
		return true
	}

	return false
}

// SetMaximumOrderQuantity gets a reference to the given float32 and assigns it to the MaximumOrderQuantity field.
func (o *PimVariationBase) SetMaximumOrderQuantity(v float32) {
	o.MaximumOrderQuantity = &v
}

// GetMinimumOrderQuantity returns the MinimumOrderQuantity field value if set, zero value otherwise.
func (o *PimVariationBase) GetMinimumOrderQuantity() float32 {
	if o == nil || o.MinimumOrderQuantity == nil {
		var ret float32
		return ret
	}
	return *o.MinimumOrderQuantity
}

// GetMinimumOrderQuantityOk returns a tuple with the MinimumOrderQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetMinimumOrderQuantityOk() (*float32, bool) {
	if o == nil || o.MinimumOrderQuantity == nil {
		return nil, false
	}
	return o.MinimumOrderQuantity, true
}

// HasMinimumOrderQuantity returns a boolean if a field has been set.
func (o *PimVariationBase) HasMinimumOrderQuantity() bool {
	if o != nil && o.MinimumOrderQuantity != nil {
		return true
	}

	return false
}

// SetMinimumOrderQuantity gets a reference to the given float32 and assigns it to the MinimumOrderQuantity field.
func (o *PimVariationBase) SetMinimumOrderQuantity(v float32) {
	o.MinimumOrderQuantity = &v
}

// GetIntervalOrderQuantity returns the IntervalOrderQuantity field value if set, zero value otherwise.
func (o *PimVariationBase) GetIntervalOrderQuantity() float32 {
	if o == nil || o.IntervalOrderQuantity == nil {
		var ret float32
		return ret
	}
	return *o.IntervalOrderQuantity
}

// GetIntervalOrderQuantityOk returns a tuple with the IntervalOrderQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIntervalOrderQuantityOk() (*float32, bool) {
	if o == nil || o.IntervalOrderQuantity == nil {
		return nil, false
	}
	return o.IntervalOrderQuantity, true
}

// HasIntervalOrderQuantity returns a boolean if a field has been set.
func (o *PimVariationBase) HasIntervalOrderQuantity() bool {
	if o != nil && o.IntervalOrderQuantity != nil {
		return true
	}

	return false
}

// SetIntervalOrderQuantity gets a reference to the given float32 and assigns it to the IntervalOrderQuantity field.
func (o *PimVariationBase) SetIntervalOrderQuantity(v float32) {
	o.IntervalOrderQuantity = &v
}

// GetAvailableUntil returns the AvailableUntil field value if set, zero value otherwise.
func (o *PimVariationBase) GetAvailableUntil() time.Time {
	if o == nil || o.AvailableUntil == nil {
		var ret time.Time
		return ret
	}
	return *o.AvailableUntil
}

// GetAvailableUntilOk returns a tuple with the AvailableUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetAvailableUntilOk() (*time.Time, bool) {
	if o == nil || o.AvailableUntil == nil {
		return nil, false
	}
	return o.AvailableUntil, true
}

// HasAvailableUntil returns a boolean if a field has been set.
func (o *PimVariationBase) HasAvailableUntil() bool {
	if o != nil && o.AvailableUntil != nil {
		return true
	}

	return false
}

// SetAvailableUntil gets a reference to the given time.Time and assigns it to the AvailableUntil field.
func (o *PimVariationBase) SetAvailableUntil(v time.Time) {
	o.AvailableUntil = &v
}

// GetReleasedAt returns the ReleasedAt field value if set, zero value otherwise.
func (o *PimVariationBase) GetReleasedAt() time.Time {
	if o == nil || o.ReleasedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ReleasedAt
}

// GetReleasedAtOk returns a tuple with the ReleasedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetReleasedAtOk() (*time.Time, bool) {
	if o == nil || o.ReleasedAt == nil {
		return nil, false
	}
	return o.ReleasedAt, true
}

// HasReleasedAt returns a boolean if a field has been set.
func (o *PimVariationBase) HasReleasedAt() bool {
	if o != nil && o.ReleasedAt != nil {
		return true
	}

	return false
}

// SetReleasedAt gets a reference to the given time.Time and assigns it to the ReleasedAt field.
func (o *PimVariationBase) SetReleasedAt(v time.Time) {
	o.ReleasedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PimVariationBase) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PimVariationBase) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PimVariationBase) SetName(v string) {
	o.Name = &v
}

// GetWeightG returns the WeightG field value if set, zero value otherwise.
func (o *PimVariationBase) GetWeightG() int32 {
	if o == nil || o.WeightG == nil {
		var ret int32
		return ret
	}
	return *o.WeightG
}

// GetWeightGOk returns a tuple with the WeightG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetWeightGOk() (*int32, bool) {
	if o == nil || o.WeightG == nil {
		return nil, false
	}
	return o.WeightG, true
}

// HasWeightG returns a boolean if a field has been set.
func (o *PimVariationBase) HasWeightG() bool {
	if o != nil && o.WeightG != nil {
		return true
	}

	return false
}

// SetWeightG gets a reference to the given int32 and assigns it to the WeightG field.
func (o *PimVariationBase) SetWeightG(v int32) {
	o.WeightG = &v
}

// GetWeightNetG returns the WeightNetG field value if set, zero value otherwise.
func (o *PimVariationBase) GetWeightNetG() int32 {
	if o == nil || o.WeightNetG == nil {
		var ret int32
		return ret
	}
	return *o.WeightNetG
}

// GetWeightNetGOk returns a tuple with the WeightNetG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetWeightNetGOk() (*int32, bool) {
	if o == nil || o.WeightNetG == nil {
		return nil, false
	}
	return o.WeightNetG, true
}

// HasWeightNetG returns a boolean if a field has been set.
func (o *PimVariationBase) HasWeightNetG() bool {
	if o != nil && o.WeightNetG != nil {
		return true
	}

	return false
}

// SetWeightNetG gets a reference to the given int32 and assigns it to the WeightNetG field.
func (o *PimVariationBase) SetWeightNetG(v int32) {
	o.WeightNetG = &v
}

// GetWidthMM returns the WidthMM field value if set, zero value otherwise.
func (o *PimVariationBase) GetWidthMM() float32 {
	if o == nil || o.WidthMM == nil {
		var ret float32
		return ret
	}
	return *o.WidthMM
}

// GetWidthMMOk returns a tuple with the WidthMM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetWidthMMOk() (*float32, bool) {
	if o == nil || o.WidthMM == nil {
		return nil, false
	}
	return o.WidthMM, true
}

// HasWidthMM returns a boolean if a field has been set.
func (o *PimVariationBase) HasWidthMM() bool {
	if o != nil && o.WidthMM != nil {
		return true
	}

	return false
}

// SetWidthMM gets a reference to the given float32 and assigns it to the WidthMM field.
func (o *PimVariationBase) SetWidthMM(v float32) {
	o.WidthMM = &v
}

// GetLengthMM returns the LengthMM field value if set, zero value otherwise.
func (o *PimVariationBase) GetLengthMM() float32 {
	if o == nil || o.LengthMM == nil {
		var ret float32
		return ret
	}
	return *o.LengthMM
}

// GetLengthMMOk returns a tuple with the LengthMM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetLengthMMOk() (*float32, bool) {
	if o == nil || o.LengthMM == nil {
		return nil, false
	}
	return o.LengthMM, true
}

// HasLengthMM returns a boolean if a field has been set.
func (o *PimVariationBase) HasLengthMM() bool {
	if o != nil && o.LengthMM != nil {
		return true
	}

	return false
}

// SetLengthMM gets a reference to the given float32 and assigns it to the LengthMM field.
func (o *PimVariationBase) SetLengthMM(v float32) {
	o.LengthMM = &v
}

// GetHeightMM returns the HeightMM field value if set, zero value otherwise.
func (o *PimVariationBase) GetHeightMM() float32 {
	if o == nil || o.HeightMM == nil {
		var ret float32
		return ret
	}
	return *o.HeightMM
}

// GetHeightMMOk returns a tuple with the HeightMM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetHeightMMOk() (*float32, bool) {
	if o == nil || o.HeightMM == nil {
		return nil, false
	}
	return o.HeightMM, true
}

// HasHeightMM returns a boolean if a field has been set.
func (o *PimVariationBase) HasHeightMM() bool {
	if o != nil && o.HeightMM != nil {
		return true
	}

	return false
}

// SetHeightMM gets a reference to the given float32 and assigns it to the HeightMM field.
func (o *PimVariationBase) SetHeightMM(v float32) {
	o.HeightMM = &v
}

// GetExtraShippingCharge1 returns the ExtraShippingCharge1 field value if set, zero value otherwise.
func (o *PimVariationBase) GetExtraShippingCharge1() float32 {
	if o == nil || o.ExtraShippingCharge1 == nil {
		var ret float32
		return ret
	}
	return *o.ExtraShippingCharge1
}

// GetExtraShippingCharge1Ok returns a tuple with the ExtraShippingCharge1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetExtraShippingCharge1Ok() (*float32, bool) {
	if o == nil || o.ExtraShippingCharge1 == nil {
		return nil, false
	}
	return o.ExtraShippingCharge1, true
}

// HasExtraShippingCharge1 returns a boolean if a field has been set.
func (o *PimVariationBase) HasExtraShippingCharge1() bool {
	if o != nil && o.ExtraShippingCharge1 != nil {
		return true
	}

	return false
}

// SetExtraShippingCharge1 gets a reference to the given float32 and assigns it to the ExtraShippingCharge1 field.
func (o *PimVariationBase) SetExtraShippingCharge1(v float32) {
	o.ExtraShippingCharge1 = &v
}

// GetExtraShippingCharge2 returns the ExtraShippingCharge2 field value if set, zero value otherwise.
func (o *PimVariationBase) GetExtraShippingCharge2() float32 {
	if o == nil || o.ExtraShippingCharge2 == nil {
		var ret float32
		return ret
	}
	return *o.ExtraShippingCharge2
}

// GetExtraShippingCharge2Ok returns a tuple with the ExtraShippingCharge2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetExtraShippingCharge2Ok() (*float32, bool) {
	if o == nil || o.ExtraShippingCharge2 == nil {
		return nil, false
	}
	return o.ExtraShippingCharge2, true
}

// HasExtraShippingCharge2 returns a boolean if a field has been set.
func (o *PimVariationBase) HasExtraShippingCharge2() bool {
	if o != nil && o.ExtraShippingCharge2 != nil {
		return true
	}

	return false
}

// SetExtraShippingCharge2 gets a reference to the given float32 and assigns it to the ExtraShippingCharge2 field.
func (o *PimVariationBase) SetExtraShippingCharge2(v float32) {
	o.ExtraShippingCharge2 = &v
}

// GetUnitsContained returns the UnitsContained field value if set, zero value otherwise.
func (o *PimVariationBase) GetUnitsContained() int32 {
	if o == nil || o.UnitsContained == nil {
		var ret int32
		return ret
	}
	return *o.UnitsContained
}

// GetUnitsContainedOk returns a tuple with the UnitsContained field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetUnitsContainedOk() (*int32, bool) {
	if o == nil || o.UnitsContained == nil {
		return nil, false
	}
	return o.UnitsContained, true
}

// HasUnitsContained returns a boolean if a field has been set.
func (o *PimVariationBase) HasUnitsContained() bool {
	if o != nil && o.UnitsContained != nil {
		return true
	}

	return false
}

// SetUnitsContained gets a reference to the given int32 and assigns it to the UnitsContained field.
func (o *PimVariationBase) SetUnitsContained(v int32) {
	o.UnitsContained = &v
}

// GetPalletTypeId returns the PalletTypeId field value if set, zero value otherwise.
func (o *PimVariationBase) GetPalletTypeId() int32 {
	if o == nil || o.PalletTypeId == nil {
		var ret int32
		return ret
	}
	return *o.PalletTypeId
}

// GetPalletTypeIdOk returns a tuple with the PalletTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetPalletTypeIdOk() (*int32, bool) {
	if o == nil || o.PalletTypeId == nil {
		return nil, false
	}
	return o.PalletTypeId, true
}

// HasPalletTypeId returns a boolean if a field has been set.
func (o *PimVariationBase) HasPalletTypeId() bool {
	if o != nil && o.PalletTypeId != nil {
		return true
	}

	return false
}

// SetPalletTypeId gets a reference to the given int32 and assigns it to the PalletTypeId field.
func (o *PimVariationBase) SetPalletTypeId(v int32) {
	o.PalletTypeId = &v
}

// GetPackingUnits returns the PackingUnits field value if set, zero value otherwise.
func (o *PimVariationBase) GetPackingUnits() int32 {
	if o == nil || o.PackingUnits == nil {
		var ret int32
		return ret
	}
	return *o.PackingUnits
}

// GetPackingUnitsOk returns a tuple with the PackingUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetPackingUnitsOk() (*int32, bool) {
	if o == nil || o.PackingUnits == nil {
		return nil, false
	}
	return o.PackingUnits, true
}

// HasPackingUnits returns a boolean if a field has been set.
func (o *PimVariationBase) HasPackingUnits() bool {
	if o != nil && o.PackingUnits != nil {
		return true
	}

	return false
}

// SetPackingUnits gets a reference to the given int32 and assigns it to the PackingUnits field.
func (o *PimVariationBase) SetPackingUnits(v int32) {
	o.PackingUnits = &v
}

// GetPackingUnitTypeId returns the PackingUnitTypeId field value if set, zero value otherwise.
func (o *PimVariationBase) GetPackingUnitTypeId() int32 {
	if o == nil || o.PackingUnitTypeId == nil {
		var ret int32
		return ret
	}
	return *o.PackingUnitTypeId
}

// GetPackingUnitTypeIdOk returns a tuple with the PackingUnitTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetPackingUnitTypeIdOk() (*int32, bool) {
	if o == nil || o.PackingUnitTypeId == nil {
		return nil, false
	}
	return o.PackingUnitTypeId, true
}

// HasPackingUnitTypeId returns a boolean if a field has been set.
func (o *PimVariationBase) HasPackingUnitTypeId() bool {
	if o != nil && o.PackingUnitTypeId != nil {
		return true
	}

	return false
}

// SetPackingUnitTypeId gets a reference to the given int32 and assigns it to the PackingUnitTypeId field.
func (o *PimVariationBase) SetPackingUnitTypeId(v int32) {
	o.PackingUnitTypeId = &v
}

// GetTransportationCosts returns the TransportationCosts field value if set, zero value otherwise.
func (o *PimVariationBase) GetTransportationCosts() float32 {
	if o == nil || o.TransportationCosts == nil {
		var ret float32
		return ret
	}
	return *o.TransportationCosts
}

// GetTransportationCostsOk returns a tuple with the TransportationCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetTransportationCostsOk() (*float32, bool) {
	if o == nil || o.TransportationCosts == nil {
		return nil, false
	}
	return o.TransportationCosts, true
}

// HasTransportationCosts returns a boolean if a field has been set.
func (o *PimVariationBase) HasTransportationCosts() bool {
	if o != nil && o.TransportationCosts != nil {
		return true
	}

	return false
}

// SetTransportationCosts gets a reference to the given float32 and assigns it to the TransportationCosts field.
func (o *PimVariationBase) SetTransportationCosts(v float32) {
	o.TransportationCosts = &v
}

// GetStorageCosts returns the StorageCosts field value if set, zero value otherwise.
func (o *PimVariationBase) GetStorageCosts() float32 {
	if o == nil || o.StorageCosts == nil {
		var ret float32
		return ret
	}
	return *o.StorageCosts
}

// GetStorageCostsOk returns a tuple with the StorageCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetStorageCostsOk() (*float32, bool) {
	if o == nil || o.StorageCosts == nil {
		return nil, false
	}
	return o.StorageCosts, true
}

// HasStorageCosts returns a boolean if a field has been set.
func (o *PimVariationBase) HasStorageCosts() bool {
	if o != nil && o.StorageCosts != nil {
		return true
	}

	return false
}

// SetStorageCosts gets a reference to the given float32 and assigns it to the StorageCosts field.
func (o *PimVariationBase) SetStorageCosts(v float32) {
	o.StorageCosts = &v
}

// GetCustoms returns the Customs field value if set, zero value otherwise.
func (o *PimVariationBase) GetCustoms() float32 {
	if o == nil || o.Customs == nil {
		var ret float32
		return ret
	}
	return *o.Customs
}

// GetCustomsOk returns a tuple with the Customs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetCustomsOk() (*float32, bool) {
	if o == nil || o.Customs == nil {
		return nil, false
	}
	return o.Customs, true
}

// HasCustoms returns a boolean if a field has been set.
func (o *PimVariationBase) HasCustoms() bool {
	if o != nil && o.Customs != nil {
		return true
	}

	return false
}

// SetCustoms gets a reference to the given float32 and assigns it to the Customs field.
func (o *PimVariationBase) SetCustoms(v float32) {
	o.Customs = &v
}

// GetOperatingCosts returns the OperatingCosts field value if set, zero value otherwise.
func (o *PimVariationBase) GetOperatingCosts() float32 {
	if o == nil || o.OperatingCosts == nil {
		var ret float32
		return ret
	}
	return *o.OperatingCosts
}

// GetOperatingCostsOk returns a tuple with the OperatingCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetOperatingCostsOk() (*float32, bool) {
	if o == nil || o.OperatingCosts == nil {
		return nil, false
	}
	return o.OperatingCosts, true
}

// HasOperatingCosts returns a boolean if a field has been set.
func (o *PimVariationBase) HasOperatingCosts() bool {
	if o != nil && o.OperatingCosts != nil {
		return true
	}

	return false
}

// SetOperatingCosts gets a reference to the given float32 and assigns it to the OperatingCosts field.
func (o *PimVariationBase) SetOperatingCosts(v float32) {
	o.OperatingCosts = &v
}

// GetVatId returns the VatId field value if set, zero value otherwise.
func (o *PimVariationBase) GetVatId() int32 {
	if o == nil || o.VatId == nil {
		var ret int32
		return ret
	}
	return *o.VatId
}

// GetVatIdOk returns a tuple with the VatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetVatIdOk() (*int32, bool) {
	if o == nil || o.VatId == nil {
		return nil, false
	}
	return o.VatId, true
}

// HasVatId returns a boolean if a field has been set.
func (o *PimVariationBase) HasVatId() bool {
	if o != nil && o.VatId != nil {
		return true
	}

	return false
}

// SetVatId gets a reference to the given int32 and assigns it to the VatId field.
func (o *PimVariationBase) SetVatId(v int32) {
	o.VatId = &v
}

// GetBundleType returns the BundleType field value if set, zero value otherwise.
func (o *PimVariationBase) GetBundleType() string {
	if o == nil || o.BundleType == nil {
		var ret string
		return ret
	}
	return *o.BundleType
}

// GetBundleTypeOk returns a tuple with the BundleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetBundleTypeOk() (*string, bool) {
	if o == nil || o.BundleType == nil {
		return nil, false
	}
	return o.BundleType, true
}

// HasBundleType returns a boolean if a field has been set.
func (o *PimVariationBase) HasBundleType() bool {
	if o != nil && o.BundleType != nil {
		return true
	}

	return false
}

// SetBundleType gets a reference to the given string and assigns it to the BundleType field.
func (o *PimVariationBase) SetBundleType(v string) {
	o.BundleType = &v
}

// GetAutomaticClientVisibility returns the AutomaticClientVisibility field value if set, zero value otherwise.
func (o *PimVariationBase) GetAutomaticClientVisibility() int32 {
	if o == nil || o.AutomaticClientVisibility == nil {
		var ret int32
		return ret
	}
	return *o.AutomaticClientVisibility
}

// GetAutomaticClientVisibilityOk returns a tuple with the AutomaticClientVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetAutomaticClientVisibilityOk() (*int32, bool) {
	if o == nil || o.AutomaticClientVisibility == nil {
		return nil, false
	}
	return o.AutomaticClientVisibility, true
}

// HasAutomaticClientVisibility returns a boolean if a field has been set.
func (o *PimVariationBase) HasAutomaticClientVisibility() bool {
	if o != nil && o.AutomaticClientVisibility != nil {
		return true
	}

	return false
}

// SetAutomaticClientVisibility gets a reference to the given int32 and assigns it to the AutomaticClientVisibility field.
func (o *PimVariationBase) SetAutomaticClientVisibility(v int32) {
	o.AutomaticClientVisibility = &v
}

// GetIsHiddenInCategoryList returns the IsHiddenInCategoryList field value if set, zero value otherwise.
func (o *PimVariationBase) GetIsHiddenInCategoryList() bool {
	if o == nil || o.IsHiddenInCategoryList == nil {
		var ret bool
		return ret
	}
	return *o.IsHiddenInCategoryList
}

// GetIsHiddenInCategoryListOk returns a tuple with the IsHiddenInCategoryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationBase) GetIsHiddenInCategoryListOk() (*bool, bool) {
	if o == nil || o.IsHiddenInCategoryList == nil {
		return nil, false
	}
	return o.IsHiddenInCategoryList, true
}

// HasIsHiddenInCategoryList returns a boolean if a field has been set.
func (o *PimVariationBase) HasIsHiddenInCategoryList() bool {
	if o != nil && o.IsHiddenInCategoryList != nil {
		return true
	}

	return false
}

// SetIsHiddenInCategoryList gets a reference to the given bool and assigns it to the IsHiddenInCategoryList field.
func (o *PimVariationBase) SetIsHiddenInCategoryList(v bool) {
	o.IsHiddenInCategoryList = &v
}

func (o PimVariationBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsMain != nil {
		toSerialize["isMain"] = o.IsMain
	}
	if o.ItemId != nil {
		toSerialize["itemId"] = o.ItemId
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.IsActive != nil {
		toSerialize["isActive"] = o.IsActive
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.Model != nil {
		toSerialize["model"] = o.Model
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.Availability != nil {
		toSerialize["availability"] = o.Availability
	}
	if o.EstimatedAvailableAt != nil {
		toSerialize["estimatedAvailableAt"] = o.EstimatedAvailableAt
	}
	if o.PurchasePrice != nil {
		toSerialize["purchasePrice"] = o.PurchasePrice
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.RelatedUpdatedAt != nil {
		toSerialize["relatedUpdatedAt"] = o.RelatedUpdatedAt
	}
	if o.PriceCalculationId != nil {
		toSerialize["priceCalculationId"] = o.PriceCalculationId
	}
	if o.Picking != nil {
		toSerialize["picking"] = o.Picking
	}
	if o.StockLimitation != nil {
		toSerialize["stockLimitation"] = o.StockLimitation
	}
	if o.IsVisibleIfNetStockIsPositive != nil {
		toSerialize["isVisibleIfNetStockIsPositive"] = o.IsVisibleIfNetStockIsPositive
	}
	if o.IsInvisibleIfNetStockIsNotPositive != nil {
		toSerialize["isInvisibleIfNetStockIsNotPositive"] = o.IsInvisibleIfNetStockIsNotPositive
	}
	if o.IsAvailableIfNetStockIsPositive != nil {
		toSerialize["isAvailableIfNetStockIsPositive"] = o.IsAvailableIfNetStockIsPositive
	}
	if o.IsUnavailableIfNetStockIsNotPositive != nil {
		toSerialize["isUnavailableIfNetStockIsNotPositive"] = o.IsUnavailableIfNetStockIsNotPositive
	}
	if o.MainWarehouseId != nil {
		toSerialize["mainWarehouseId"] = o.MainWarehouseId
	}
	if o.MaximumOrderQuantity != nil {
		toSerialize["maximumOrderQuantity"] = o.MaximumOrderQuantity
	}
	if o.MinimumOrderQuantity != nil {
		toSerialize["minimumOrderQuantity"] = o.MinimumOrderQuantity
	}
	if o.IntervalOrderQuantity != nil {
		toSerialize["intervalOrderQuantity"] = o.IntervalOrderQuantity
	}
	if o.AvailableUntil != nil {
		toSerialize["availableUntil"] = o.AvailableUntil
	}
	if o.ReleasedAt != nil {
		toSerialize["releasedAt"] = o.ReleasedAt
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.WeightG != nil {
		toSerialize["weightG"] = o.WeightG
	}
	if o.WeightNetG != nil {
		toSerialize["weightNetG"] = o.WeightNetG
	}
	if o.WidthMM != nil {
		toSerialize["widthMM"] = o.WidthMM
	}
	if o.LengthMM != nil {
		toSerialize["lengthMM"] = o.LengthMM
	}
	if o.HeightMM != nil {
		toSerialize["heightMM"] = o.HeightMM
	}
	if o.ExtraShippingCharge1 != nil {
		toSerialize["extraShippingCharge1"] = o.ExtraShippingCharge1
	}
	if o.ExtraShippingCharge2 != nil {
		toSerialize["extraShippingCharge2"] = o.ExtraShippingCharge2
	}
	if o.UnitsContained != nil {
		toSerialize["unitsContained"] = o.UnitsContained
	}
	if o.PalletTypeId != nil {
		toSerialize["palletTypeId"] = o.PalletTypeId
	}
	if o.PackingUnits != nil {
		toSerialize["packingUnits"] = o.PackingUnits
	}
	if o.PackingUnitTypeId != nil {
		toSerialize["packingUnitTypeId"] = o.PackingUnitTypeId
	}
	if o.TransportationCosts != nil {
		toSerialize["transportationCosts"] = o.TransportationCosts
	}
	if o.StorageCosts != nil {
		toSerialize["storageCosts"] = o.StorageCosts
	}
	if o.Customs != nil {
		toSerialize["customs"] = o.Customs
	}
	if o.OperatingCosts != nil {
		toSerialize["operatingCosts"] = o.OperatingCosts
	}
	if o.VatId != nil {
		toSerialize["vatId"] = o.VatId
	}
	if o.BundleType != nil {
		toSerialize["bundleType"] = o.BundleType
	}
	if o.AutomaticClientVisibility != nil {
		toSerialize["automaticClientVisibility"] = o.AutomaticClientVisibility
	}
	if o.IsHiddenInCategoryList != nil {
		toSerialize["isHiddenInCategoryList"] = o.IsHiddenInCategoryList
	}
	return json.Marshal(toSerialize)
}

type NullablePimVariationBase struct {
	value *PimVariationBase
	isSet bool
}

func (v NullablePimVariationBase) Get() *PimVariationBase {
	return v.value
}

func (v *NullablePimVariationBase) Set(val *PimVariationBase) {
	v.value = val
	v.isSet = true
}

func (v NullablePimVariationBase) IsSet() bool {
	return v.isSet
}

func (v *NullablePimVariationBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePimVariationBase(val *PimVariationBase) *NullablePimVariationBase {
	return &NullablePimVariationBase{value: val, isSet: true}
}

func (v NullablePimVariationBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePimVariationBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


