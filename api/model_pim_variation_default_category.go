/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// PimVariationDefaultCategory variation default category model
type PimVariationDefaultCategory struct {
	VariationId *int32 `json:"variationId,omitempty"`
	BranchId *int32 `json:"branchId,omitempty"`
	PlentyId *int32 `json:"plentyId,omitempty"`
	Manually *bool `json:"manually,omitempty"`
}

// NewPimVariationDefaultCategory instantiates a new PimVariationDefaultCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPimVariationDefaultCategory() *PimVariationDefaultCategory {
	this := PimVariationDefaultCategory{}
	return &this
}

// NewPimVariationDefaultCategoryWithDefaults instantiates a new PimVariationDefaultCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPimVariationDefaultCategoryWithDefaults() *PimVariationDefaultCategory {
	this := PimVariationDefaultCategory{}
	return &this
}

// GetVariationId returns the VariationId field value if set, zero value otherwise.
func (o *PimVariationDefaultCategory) GetVariationId() int32 {
	if o == nil || o.VariationId == nil {
		var ret int32
		return ret
	}
	return *o.VariationId
}

// GetVariationIdOk returns a tuple with the VariationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationDefaultCategory) GetVariationIdOk() (*int32, bool) {
	if o == nil || o.VariationId == nil {
		return nil, false
	}
	return o.VariationId, true
}

// HasVariationId returns a boolean if a field has been set.
func (o *PimVariationDefaultCategory) HasVariationId() bool {
	if o != nil && o.VariationId != nil {
		return true
	}

	return false
}

// SetVariationId gets a reference to the given int32 and assigns it to the VariationId field.
func (o *PimVariationDefaultCategory) SetVariationId(v int32) {
	o.VariationId = &v
}

// GetBranchId returns the BranchId field value if set, zero value otherwise.
func (o *PimVariationDefaultCategory) GetBranchId() int32 {
	if o == nil || o.BranchId == nil {
		var ret int32
		return ret
	}
	return *o.BranchId
}

// GetBranchIdOk returns a tuple with the BranchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationDefaultCategory) GetBranchIdOk() (*int32, bool) {
	if o == nil || o.BranchId == nil {
		return nil, false
	}
	return o.BranchId, true
}

// HasBranchId returns a boolean if a field has been set.
func (o *PimVariationDefaultCategory) HasBranchId() bool {
	if o != nil && o.BranchId != nil {
		return true
	}

	return false
}

// SetBranchId gets a reference to the given int32 and assigns it to the BranchId field.
func (o *PimVariationDefaultCategory) SetBranchId(v int32) {
	o.BranchId = &v
}

// GetPlentyId returns the PlentyId field value if set, zero value otherwise.
func (o *PimVariationDefaultCategory) GetPlentyId() int32 {
	if o == nil || o.PlentyId == nil {
		var ret int32
		return ret
	}
	return *o.PlentyId
}

// GetPlentyIdOk returns a tuple with the PlentyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationDefaultCategory) GetPlentyIdOk() (*int32, bool) {
	if o == nil || o.PlentyId == nil {
		return nil, false
	}
	return o.PlentyId, true
}

// HasPlentyId returns a boolean if a field has been set.
func (o *PimVariationDefaultCategory) HasPlentyId() bool {
	if o != nil && o.PlentyId != nil {
		return true
	}

	return false
}

// SetPlentyId gets a reference to the given int32 and assigns it to the PlentyId field.
func (o *PimVariationDefaultCategory) SetPlentyId(v int32) {
	o.PlentyId = &v
}

// GetManually returns the Manually field value if set, zero value otherwise.
func (o *PimVariationDefaultCategory) GetManually() bool {
	if o == nil || o.Manually == nil {
		var ret bool
		return ret
	}
	return *o.Manually
}

// GetManuallyOk returns a tuple with the Manually field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PimVariationDefaultCategory) GetManuallyOk() (*bool, bool) {
	if o == nil || o.Manually == nil {
		return nil, false
	}
	return o.Manually, true
}

// HasManually returns a boolean if a field has been set.
func (o *PimVariationDefaultCategory) HasManually() bool {
	if o != nil && o.Manually != nil {
		return true
	}

	return false
}

// SetManually gets a reference to the given bool and assigns it to the Manually field.
func (o *PimVariationDefaultCategory) SetManually(v bool) {
	o.Manually = &v
}

func (o PimVariationDefaultCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VariationId != nil {
		toSerialize["variationId"] = o.VariationId
	}
	if o.BranchId != nil {
		toSerialize["branchId"] = o.BranchId
	}
	if o.PlentyId != nil {
		toSerialize["plentyId"] = o.PlentyId
	}
	if o.Manually != nil {
		toSerialize["manually"] = o.Manually
	}
	return json.Marshal(toSerialize)
}

type NullablePimVariationDefaultCategory struct {
	value *PimVariationDefaultCategory
	isSet bool
}

func (v NullablePimVariationDefaultCategory) Get() *PimVariationDefaultCategory {
	return v.value
}

func (v *NullablePimVariationDefaultCategory) Set(val *PimVariationDefaultCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePimVariationDefaultCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePimVariationDefaultCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePimVariationDefaultCategory(val *PimVariationDefaultCategory) *NullablePimVariationDefaultCategory {
	return &NullablePimVariationDefaultCategory{value: val, isSet: true}
}

func (v NullablePimVariationDefaultCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePimVariationDefaultCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


