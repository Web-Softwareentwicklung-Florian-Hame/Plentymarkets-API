/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// VariationStock variation stock model
type VariationStock struct {
	Quantity *float32 `json:"quantity,omitempty"`
	StorageLocationId *int32 `json:"storageLocationId,omitempty"`
	PurchasePrice *float32 `json:"purchasePrice,omitempty"`
	ReservedListing *float32 `json:"reservedListing,omitempty"`
	ReservedBundles *float32 `json:"reservedBundles,omitempty"`
	VariationId *int32 `json:"variationId,omitempty"`
	ItemId *int32 `json:"itemId,omitempty"`
	WarehouseId *int32 `json:"warehouseId,omitempty"`
	PhysicalStock *float32 `json:"physicalStock,omitempty"`
	ReservedStock *float32 `json:"reservedStock,omitempty"`
	NetStock *float32 `json:"netStock,omitempty"`
	ReorderLevel *float32 `json:"reorderLevel,omitempty"`
	DeltaReorderLevel *float32 `json:"deltaReorderLevel,omitempty"`
}

// NewVariationStock instantiates a new VariationStock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariationStock() *VariationStock {
	this := VariationStock{}
	return &this
}

// NewVariationStockWithDefaults instantiates a new VariationStock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariationStockWithDefaults() *VariationStock {
	this := VariationStock{}
	return &this
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *VariationStock) GetQuantity() float32 {
	if o == nil || o.Quantity == nil {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetQuantityOk() (*float32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *VariationStock) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *VariationStock) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetStorageLocationId returns the StorageLocationId field value if set, zero value otherwise.
func (o *VariationStock) GetStorageLocationId() int32 {
	if o == nil || o.StorageLocationId == nil {
		var ret int32
		return ret
	}
	return *o.StorageLocationId
}

// GetStorageLocationIdOk returns a tuple with the StorageLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetStorageLocationIdOk() (*int32, bool) {
	if o == nil || o.StorageLocationId == nil {
		return nil, false
	}
	return o.StorageLocationId, true
}

// HasStorageLocationId returns a boolean if a field has been set.
func (o *VariationStock) HasStorageLocationId() bool {
	if o != nil && o.StorageLocationId != nil {
		return true
	}

	return false
}

// SetStorageLocationId gets a reference to the given int32 and assigns it to the StorageLocationId field.
func (o *VariationStock) SetStorageLocationId(v int32) {
	o.StorageLocationId = &v
}

// GetPurchasePrice returns the PurchasePrice field value if set, zero value otherwise.
func (o *VariationStock) GetPurchasePrice() float32 {
	if o == nil || o.PurchasePrice == nil {
		var ret float32
		return ret
	}
	return *o.PurchasePrice
}

// GetPurchasePriceOk returns a tuple with the PurchasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetPurchasePriceOk() (*float32, bool) {
	if o == nil || o.PurchasePrice == nil {
		return nil, false
	}
	return o.PurchasePrice, true
}

// HasPurchasePrice returns a boolean if a field has been set.
func (o *VariationStock) HasPurchasePrice() bool {
	if o != nil && o.PurchasePrice != nil {
		return true
	}

	return false
}

// SetPurchasePrice gets a reference to the given float32 and assigns it to the PurchasePrice field.
func (o *VariationStock) SetPurchasePrice(v float32) {
	o.PurchasePrice = &v
}

// GetReservedListing returns the ReservedListing field value if set, zero value otherwise.
func (o *VariationStock) GetReservedListing() float32 {
	if o == nil || o.ReservedListing == nil {
		var ret float32
		return ret
	}
	return *o.ReservedListing
}

// GetReservedListingOk returns a tuple with the ReservedListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetReservedListingOk() (*float32, bool) {
	if o == nil || o.ReservedListing == nil {
		return nil, false
	}
	return o.ReservedListing, true
}

// HasReservedListing returns a boolean if a field has been set.
func (o *VariationStock) HasReservedListing() bool {
	if o != nil && o.ReservedListing != nil {
		return true
	}

	return false
}

// SetReservedListing gets a reference to the given float32 and assigns it to the ReservedListing field.
func (o *VariationStock) SetReservedListing(v float32) {
	o.ReservedListing = &v
}

// GetReservedBundles returns the ReservedBundles field value if set, zero value otherwise.
func (o *VariationStock) GetReservedBundles() float32 {
	if o == nil || o.ReservedBundles == nil {
		var ret float32
		return ret
	}
	return *o.ReservedBundles
}

// GetReservedBundlesOk returns a tuple with the ReservedBundles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetReservedBundlesOk() (*float32, bool) {
	if o == nil || o.ReservedBundles == nil {
		return nil, false
	}
	return o.ReservedBundles, true
}

// HasReservedBundles returns a boolean if a field has been set.
func (o *VariationStock) HasReservedBundles() bool {
	if o != nil && o.ReservedBundles != nil {
		return true
	}

	return false
}

// SetReservedBundles gets a reference to the given float32 and assigns it to the ReservedBundles field.
func (o *VariationStock) SetReservedBundles(v float32) {
	o.ReservedBundles = &v
}

// GetVariationId returns the VariationId field value if set, zero value otherwise.
func (o *VariationStock) GetVariationId() int32 {
	if o == nil || o.VariationId == nil {
		var ret int32
		return ret
	}
	return *o.VariationId
}

// GetVariationIdOk returns a tuple with the VariationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetVariationIdOk() (*int32, bool) {
	if o == nil || o.VariationId == nil {
		return nil, false
	}
	return o.VariationId, true
}

// HasVariationId returns a boolean if a field has been set.
func (o *VariationStock) HasVariationId() bool {
	if o != nil && o.VariationId != nil {
		return true
	}

	return false
}

// SetVariationId gets a reference to the given int32 and assigns it to the VariationId field.
func (o *VariationStock) SetVariationId(v int32) {
	o.VariationId = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *VariationStock) GetItemId() int32 {
	if o == nil || o.ItemId == nil {
		var ret int32
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetItemIdOk() (*int32, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *VariationStock) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int32 and assigns it to the ItemId field.
func (o *VariationStock) SetItemId(v int32) {
	o.ItemId = &v
}

// GetWarehouseId returns the WarehouseId field value if set, zero value otherwise.
func (o *VariationStock) GetWarehouseId() int32 {
	if o == nil || o.WarehouseId == nil {
		var ret int32
		return ret
	}
	return *o.WarehouseId
}

// GetWarehouseIdOk returns a tuple with the WarehouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetWarehouseIdOk() (*int32, bool) {
	if o == nil || o.WarehouseId == nil {
		return nil, false
	}
	return o.WarehouseId, true
}

// HasWarehouseId returns a boolean if a field has been set.
func (o *VariationStock) HasWarehouseId() bool {
	if o != nil && o.WarehouseId != nil {
		return true
	}

	return false
}

// SetWarehouseId gets a reference to the given int32 and assigns it to the WarehouseId field.
func (o *VariationStock) SetWarehouseId(v int32) {
	o.WarehouseId = &v
}

// GetPhysicalStock returns the PhysicalStock field value if set, zero value otherwise.
func (o *VariationStock) GetPhysicalStock() float32 {
	if o == nil || o.PhysicalStock == nil {
		var ret float32
		return ret
	}
	return *o.PhysicalStock
}

// GetPhysicalStockOk returns a tuple with the PhysicalStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetPhysicalStockOk() (*float32, bool) {
	if o == nil || o.PhysicalStock == nil {
		return nil, false
	}
	return o.PhysicalStock, true
}

// HasPhysicalStock returns a boolean if a field has been set.
func (o *VariationStock) HasPhysicalStock() bool {
	if o != nil && o.PhysicalStock != nil {
		return true
	}

	return false
}

// SetPhysicalStock gets a reference to the given float32 and assigns it to the PhysicalStock field.
func (o *VariationStock) SetPhysicalStock(v float32) {
	o.PhysicalStock = &v
}

// GetReservedStock returns the ReservedStock field value if set, zero value otherwise.
func (o *VariationStock) GetReservedStock() float32 {
	if o == nil || o.ReservedStock == nil {
		var ret float32
		return ret
	}
	return *o.ReservedStock
}

// GetReservedStockOk returns a tuple with the ReservedStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetReservedStockOk() (*float32, bool) {
	if o == nil || o.ReservedStock == nil {
		return nil, false
	}
	return o.ReservedStock, true
}

// HasReservedStock returns a boolean if a field has been set.
func (o *VariationStock) HasReservedStock() bool {
	if o != nil && o.ReservedStock != nil {
		return true
	}

	return false
}

// SetReservedStock gets a reference to the given float32 and assigns it to the ReservedStock field.
func (o *VariationStock) SetReservedStock(v float32) {
	o.ReservedStock = &v
}

// GetNetStock returns the NetStock field value if set, zero value otherwise.
func (o *VariationStock) GetNetStock() float32 {
	if o == nil || o.NetStock == nil {
		var ret float32
		return ret
	}
	return *o.NetStock
}

// GetNetStockOk returns a tuple with the NetStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetNetStockOk() (*float32, bool) {
	if o == nil || o.NetStock == nil {
		return nil, false
	}
	return o.NetStock, true
}

// HasNetStock returns a boolean if a field has been set.
func (o *VariationStock) HasNetStock() bool {
	if o != nil && o.NetStock != nil {
		return true
	}

	return false
}

// SetNetStock gets a reference to the given float32 and assigns it to the NetStock field.
func (o *VariationStock) SetNetStock(v float32) {
	o.NetStock = &v
}

// GetReorderLevel returns the ReorderLevel field value if set, zero value otherwise.
func (o *VariationStock) GetReorderLevel() float32 {
	if o == nil || o.ReorderLevel == nil {
		var ret float32
		return ret
	}
	return *o.ReorderLevel
}

// GetReorderLevelOk returns a tuple with the ReorderLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetReorderLevelOk() (*float32, bool) {
	if o == nil || o.ReorderLevel == nil {
		return nil, false
	}
	return o.ReorderLevel, true
}

// HasReorderLevel returns a boolean if a field has been set.
func (o *VariationStock) HasReorderLevel() bool {
	if o != nil && o.ReorderLevel != nil {
		return true
	}

	return false
}

// SetReorderLevel gets a reference to the given float32 and assigns it to the ReorderLevel field.
func (o *VariationStock) SetReorderLevel(v float32) {
	o.ReorderLevel = &v
}

// GetDeltaReorderLevel returns the DeltaReorderLevel field value if set, zero value otherwise.
func (o *VariationStock) GetDeltaReorderLevel() float32 {
	if o == nil || o.DeltaReorderLevel == nil {
		var ret float32
		return ret
	}
	return *o.DeltaReorderLevel
}

// GetDeltaReorderLevelOk returns a tuple with the DeltaReorderLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariationStock) GetDeltaReorderLevelOk() (*float32, bool) {
	if o == nil || o.DeltaReorderLevel == nil {
		return nil, false
	}
	return o.DeltaReorderLevel, true
}

// HasDeltaReorderLevel returns a boolean if a field has been set.
func (o *VariationStock) HasDeltaReorderLevel() bool {
	if o != nil && o.DeltaReorderLevel != nil {
		return true
	}

	return false
}

// SetDeltaReorderLevel gets a reference to the given float32 and assigns it to the DeltaReorderLevel field.
func (o *VariationStock) SetDeltaReorderLevel(v float32) {
	o.DeltaReorderLevel = &v
}

func (o VariationStock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.StorageLocationId != nil {
		toSerialize["storageLocationId"] = o.StorageLocationId
	}
	if o.PurchasePrice != nil {
		toSerialize["purchasePrice"] = o.PurchasePrice
	}
	if o.ReservedListing != nil {
		toSerialize["reservedListing"] = o.ReservedListing
	}
	if o.ReservedBundles != nil {
		toSerialize["reservedBundles"] = o.ReservedBundles
	}
	if o.VariationId != nil {
		toSerialize["variationId"] = o.VariationId
	}
	if o.ItemId != nil {
		toSerialize["itemId"] = o.ItemId
	}
	if o.WarehouseId != nil {
		toSerialize["warehouseId"] = o.WarehouseId
	}
	if o.PhysicalStock != nil {
		toSerialize["physicalStock"] = o.PhysicalStock
	}
	if o.ReservedStock != nil {
		toSerialize["reservedStock"] = o.ReservedStock
	}
	if o.NetStock != nil {
		toSerialize["netStock"] = o.NetStock
	}
	if o.ReorderLevel != nil {
		toSerialize["reorderLevel"] = o.ReorderLevel
	}
	if o.DeltaReorderLevel != nil {
		toSerialize["deltaReorderLevel"] = o.DeltaReorderLevel
	}
	return json.Marshal(toSerialize)
}

type NullableVariationStock struct {
	value *VariationStock
	isSet bool
}

func (v NullableVariationStock) Get() *VariationStock {
	return v.value
}

func (v *NullableVariationStock) Set(val *VariationStock) {
	v.value = val
	v.isSet = true
}

func (v NullableVariationStock) IsSet() bool {
	return v.isSet
}

func (v *NullableVariationStock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariationStock(val *VariationStock) *NullableVariationStock {
	return &NullableVariationStock{value: val, isSet: true}
}

func (v NullableVariationStock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariationStock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


