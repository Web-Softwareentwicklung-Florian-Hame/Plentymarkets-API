/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiRestCategoriesGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	page *int32
}

// Limits the results to a specific page.
func (r ApiRestCategoriesGetRequest) Page(page int32) ApiRestCategoriesGetRequest {
	r.page = &page
	return r
}

func (r ApiRestCategoriesGetRequest) Execute() (CategoryPagination, *_nethttp.Response, error) {
	return r.ApiService.RestCategoriesGetExecute(r)
}

/*
RestCategoriesGet fetching categories with pagination and optional filter queries

fetching categories

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestCategoriesGetRequest
*/
func (a *DefaultApiService) RestCategoriesGet(ctx _context.Context) ApiRestCategoriesGetRequest {
	return ApiRestCategoriesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoryPagination
func (a *DefaultApiService) RestCategoriesGetExecute(r ApiRestCategoriesGetRequest) (CategoryPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CategoryPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestCategoriesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestCategoriesPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	category *[]Category
}

func (r ApiRestCategoriesPostRequest) Category(category []Category) ApiRestCategoriesPostRequest {
	r.category = &category
	return r
}

func (r ApiRestCategoriesPostRequest) Execute() ([]Category, *_nethttp.Response, error) {
	return r.ApiService.RestCategoriesPostExecute(r)
}

/*
RestCategoriesPost creating new categories

creating new categories

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestCategoriesPostRequest
*/
func (a *DefaultApiService) RestCategoriesPost(ctx _context.Context) ApiRestCategoriesPostRequest {
	return ApiRestCategoriesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Category
func (a *DefaultApiService) RestCategoriesPostExecute(r ApiRestCategoriesPostRequest) ([]Category, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []Category
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestCategoriesPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/categories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.category
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestElasticSyncSyncSyncIdRunPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	syncId int32
}


func (r ApiRestElasticSyncSyncSyncIdRunPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.RestElasticSyncSyncSyncIdRunPostExecute(r)
}

/*
RestElasticSyncSyncSyncIdRunPost runs an existing elastic sync

runs an existing elastic sync

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param syncId
 @return ApiRestElasticSyncSyncSyncIdRunPostRequest
*/
func (a *DefaultApiService) RestElasticSyncSyncSyncIdRunPost(ctx _context.Context, syncId int32) ApiRestElasticSyncSyncSyncIdRunPostRequest {
	return ApiRestElasticSyncSyncSyncIdRunPostRequest{
		ApiService: a,
		ctx: ctx,
		syncId: syncId,
	}
}

// Execute executes the request
func (a *DefaultApiService) RestElasticSyncSyncSyncIdRunPostExecute(r ApiRestElasticSyncSyncSyncIdRunPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestElasticSyncSyncSyncIdRunPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/elastic-sync/sync/{syncId}/run"
	localVarPath = strings.Replace(localVarPath, "{"+"syncId"+"}", _neturl.PathEscape(parameterToString(r.syncId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRestItemsAttributeValuesValueIdNamesPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	valueId int32
	attributeName *AttributeName
}

func (r ApiRestItemsAttributeValuesValueIdNamesPostRequest) AttributeName(attributeName AttributeName) ApiRestItemsAttributeValuesValueIdNamesPostRequest {
	r.attributeName = &attributeName
	return r
}

func (r ApiRestItemsAttributeValuesValueIdNamesPostRequest) Execute() (AttributeName, *_nethttp.Response, error) {
	return r.ApiService.RestItemsAttributeValuesValueIdNamesPostExecute(r)
}

/*
RestItemsAttributeValuesValueIdNamesPost creating attribute values names

creating attribute values names

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param valueId
 @return ApiRestItemsAttributeValuesValueIdNamesPostRequest
*/
func (a *DefaultApiService) RestItemsAttributeValuesValueIdNamesPost(ctx _context.Context, valueId int32) ApiRestItemsAttributeValuesValueIdNamesPostRequest {
	return ApiRestItemsAttributeValuesValueIdNamesPostRequest{
		ApiService: a,
		ctx: ctx,
		valueId: valueId,
	}
}

// Execute executes the request
//  @return AttributeName
func (a *DefaultApiService) RestItemsAttributeValuesValueIdNamesPostExecute(r ApiRestItemsAttributeValuesValueIdNamesPostRequest) (AttributeName, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AttributeName
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsAttributeValuesValueIdNamesPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/attribute_values/{valueId}/names"
	localVarPath = strings.Replace(localVarPath, "{"+"valueId"+"}", _neturl.PathEscape(parameterToString(r.valueId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.attributeName
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsAttributesAttributeIdNamesPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	attributeId int32
	attributeName *AttributeName
}

func (r ApiRestItemsAttributesAttributeIdNamesPostRequest) AttributeName(attributeName AttributeName) ApiRestItemsAttributesAttributeIdNamesPostRequest {
	r.attributeName = &attributeName
	return r
}

func (r ApiRestItemsAttributesAttributeIdNamesPostRequest) Execute() (AttributeName, *_nethttp.Response, error) {
	return r.ApiService.RestItemsAttributesAttributeIdNamesPostExecute(r)
}

/*
RestItemsAttributesAttributeIdNamesPost creating names for attribute

creating names for attribute

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param attributeId
 @return ApiRestItemsAttributesAttributeIdNamesPostRequest
*/
func (a *DefaultApiService) RestItemsAttributesAttributeIdNamesPost(ctx _context.Context, attributeId int32) ApiRestItemsAttributesAttributeIdNamesPostRequest {
	return ApiRestItemsAttributesAttributeIdNamesPostRequest{
		ApiService: a,
		ctx: ctx,
		attributeId: attributeId,
	}
}

// Execute executes the request
//  @return AttributeName
func (a *DefaultApiService) RestItemsAttributesAttributeIdNamesPostExecute(r ApiRestItemsAttributesAttributeIdNamesPostRequest) (AttributeName, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AttributeName
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsAttributesAttributeIdNamesPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/attributes/{attributeId}/names"
	localVarPath = strings.Replace(localVarPath, "{"+"attributeId"+"}", _neturl.PathEscape(parameterToString(r.attributeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.attributeName
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsAttributesAttributeIdValuesGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	attributeId int32
	page *int32
	with *[]string
}

// Limits the results to a specific page.
func (r ApiRestItemsAttributesAttributeIdValuesGetRequest) Page(page int32) ApiRestItemsAttributesAttributeIdValuesGetRequest {
	r.page = &page
	return r
}
func (r ApiRestItemsAttributesAttributeIdValuesGetRequest) With(with []string) ApiRestItemsAttributesAttributeIdValuesGetRequest {
	r.with = &with
	return r
}

func (r ApiRestItemsAttributesAttributeIdValuesGetRequest) Execute() (AttributeValuePagination, *_nethttp.Response, error) {
	return r.ApiService.RestItemsAttributesAttributeIdValuesGetExecute(r)
}

/*
RestItemsAttributesAttributeIdValuesGet fetching attributes values with pagination

fetching attributes values with pagination

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param attributeId
 @return ApiRestItemsAttributesAttributeIdValuesGetRequest
*/
func (a *DefaultApiService) RestItemsAttributesAttributeIdValuesGet(ctx _context.Context, attributeId int32) ApiRestItemsAttributesAttributeIdValuesGetRequest {
	return ApiRestItemsAttributesAttributeIdValuesGetRequest{
		ApiService: a,
		ctx: ctx,
		attributeId: attributeId,
	}
}

// Execute executes the request
//  @return AttributeValuePagination
func (a *DefaultApiService) RestItemsAttributesAttributeIdValuesGetExecute(r ApiRestItemsAttributesAttributeIdValuesGetRequest) (AttributeValuePagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AttributeValuePagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsAttributesAttributeIdValuesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/attributes/{attributeId}/values"
	localVarPath = strings.Replace(localVarPath, "{"+"attributeId"+"}", _neturl.PathEscape(parameterToString(r.attributeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.with != nil {
		t := *r.with
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("with", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("with", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsAttributesAttributeIdValuesPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	attributeId int32
	attributeValue *AttributeValue
}

func (r ApiRestItemsAttributesAttributeIdValuesPostRequest) AttributeValue(attributeValue AttributeValue) ApiRestItemsAttributesAttributeIdValuesPostRequest {
	r.attributeValue = &attributeValue
	return r
}

func (r ApiRestItemsAttributesAttributeIdValuesPostRequest) Execute() (AttributeValue, *_nethttp.Response, error) {
	return r.ApiService.RestItemsAttributesAttributeIdValuesPostExecute(r)
}

/*
RestItemsAttributesAttributeIdValuesPost creating new attribute values

creating new attribute values

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param attributeId
 @return ApiRestItemsAttributesAttributeIdValuesPostRequest
*/
func (a *DefaultApiService) RestItemsAttributesAttributeIdValuesPost(ctx _context.Context, attributeId int32) ApiRestItemsAttributesAttributeIdValuesPostRequest {
	return ApiRestItemsAttributesAttributeIdValuesPostRequest{
		ApiService: a,
		ctx: ctx,
		attributeId: attributeId,
	}
}

// Execute executes the request
//  @return AttributeValue
func (a *DefaultApiService) RestItemsAttributesAttributeIdValuesPostExecute(r ApiRestItemsAttributesAttributeIdValuesPostRequest) (AttributeValue, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AttributeValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsAttributesAttributeIdValuesPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/attributes/{attributeId}/values"
	localVarPath = strings.Replace(localVarPath, "{"+"attributeId"+"}", _neturl.PathEscape(parameterToString(r.attributeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.attributeValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsAttributesGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	page *int32
	with *[]string
}

// Limits the results to a specific page.
func (r ApiRestItemsAttributesGetRequest) Page(page int32) ApiRestItemsAttributesGetRequest {
	r.page = &page
	return r
}
func (r ApiRestItemsAttributesGetRequest) With(with []string) ApiRestItemsAttributesGetRequest {
	r.with = &with
	return r
}

func (r ApiRestItemsAttributesGetRequest) Execute() (AttributePagination, *_nethttp.Response, error) {
	return r.ApiService.RestItemsAttributesGetExecute(r)
}

/*
RestItemsAttributesGet fetching attributes with pagination

fetching attributes with pagination

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsAttributesGetRequest
*/
func (a *DefaultApiService) RestItemsAttributesGet(ctx _context.Context) ApiRestItemsAttributesGetRequest {
	return ApiRestItemsAttributesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AttributePagination
func (a *DefaultApiService) RestItemsAttributesGetExecute(r ApiRestItemsAttributesGetRequest) (AttributePagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AttributePagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsAttributesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/attributes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.with != nil {
		t := *r.with
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("with", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("with", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsAttributesPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	attribute *Attribute
}

func (r ApiRestItemsAttributesPostRequest) Attribute(attribute Attribute) ApiRestItemsAttributesPostRequest {
	r.attribute = &attribute
	return r
}

func (r ApiRestItemsAttributesPostRequest) Execute() (Attribute, *_nethttp.Response, error) {
	return r.ApiService.RestItemsAttributesPostExecute(r)
}

/*
RestItemsAttributesPost creating new attributes

creating new attributes

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsAttributesPostRequest
*/
func (a *DefaultApiService) RestItemsAttributesPost(ctx _context.Context) ApiRestItemsAttributesPostRequest {
	return ApiRestItemsAttributesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Attribute
func (a *DefaultApiService) RestItemsAttributesPostExecute(r ApiRestItemsAttributesPostRequest) (Attribute, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Attribute
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsAttributesPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/attributes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.attribute
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	with *[]string
	lang *string
	page *int32
	itemsPerPage *int32
	name *string
	manufacturerId *int32
	id *[]int32
	flagOne *int32
	flagTwo *int32
	updatedBetween *string
	variationUpdatedBetween *string
	variationRelatedUpdatedBetween *string
	or *string
}

// Includes the specified variation information in the results
func (r ApiRestItemsGetRequest) With(with []string) ApiRestItemsGetRequest {
	r.with = &with
	return r
}
// The language of the variation information.
func (r ApiRestItemsGetRequest) Lang(lang string) ApiRestItemsGetRequest {
	r.lang = &lang
	return r
}
// Limits the results to a specific page.
func (r ApiRestItemsGetRequest) Page(page int32) ApiRestItemsGetRequest {
	r.page = &page
	return r
}
// Limits the number of results listed per page to a specific number.
func (r ApiRestItemsGetRequest) ItemsPerPage(itemsPerPage int32) ApiRestItemsGetRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}
// Filter restricts the list of results to items with the specified item name.
func (r ApiRestItemsGetRequest) Name(name string) ApiRestItemsGetRequest {
	r.name = &name
	return r
}
// Filter restricts the list of results to items with the specified manufacturerId.
func (r ApiRestItemsGetRequest) ManufacturerId(manufacturerId int32) ApiRestItemsGetRequest {
	r.manufacturerId = &manufacturerId
	return r
}
// Filter restricts the list of results to items with the specified ID. More than one ID should be separated by commas.
func (r ApiRestItemsGetRequest) Id(id []int32) ApiRestItemsGetRequest {
	r.id = &id
	return r
}
// Filter restricts the list of results to items with the specified flagOne.
func (r ApiRestItemsGetRequest) FlagOne(flagOne int32) ApiRestItemsGetRequest {
	r.flagOne = &flagOne
	return r
}
// Filter restricts the list of results to items with the specified flagTwo.
func (r ApiRestItemsGetRequest) FlagTwo(flagTwo int32) ApiRestItemsGetRequest {
	r.flagTwo = &flagTwo
	return r
}
// Filter restricts the list of results to items updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween&#x3D;1451606400,1456790400 will list items updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween&#x3D;1451606400 will list items updated since 2016-01-01. The PHP function strtotime is also supported.
func (r ApiRestItemsGetRequest) UpdatedBetween(updatedBetween string) ApiRestItemsGetRequest {
	r.updatedBetween = &updatedBetween
	return r
}
// Filter restricts the list of results to items with variations that were updated during the specified period. The end date (to) is optional. If no end date is specified, items with variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween&#x3D;1451606400,1456790400 will list items with variations that were updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween&#x3D;1451606400 will list items with variations that were updated since 2016-01-01. The PHP function strtotime is also supported.
func (r ApiRestItemsGetRequest) VariationUpdatedBetween(variationUpdatedBetween string) ApiRestItemsGetRequest {
	r.variationUpdatedBetween = &variationUpdatedBetween
	return r
}
// Filter restricts the list of results to items with variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
func (r ApiRestItemsGetRequest) VariationRelatedUpdatedBetween(variationRelatedUpdatedBetween string) ApiRestItemsGetRequest {
	r.variationRelatedUpdatedBetween = &variationRelatedUpdatedBetween
	return r
}
// Filters can be defined in this param to link them via OR instead of AND. The syntax looks like the following: or&#x3D;(updatedBetween&#x3D;1573050718&amp;varitionUpdatedBetween&#x3D;1573050718). Everything in the brackets is written in the normal URL-Syntax. The or-param can be used multiple times if it is used like this: or[]&#x3D;(...)&amp;or[]&#x3D;(...)
func (r ApiRestItemsGetRequest) Or(or string) ApiRestItemsGetRequest {
	r.or = &or
	return r
}

func (r ApiRestItemsGetRequest) Execute() ([]ItemPagination, *_nethttp.Response, error) {
	return r.ApiService.RestItemsGetExecute(r)
}

/*
RestItemsGet fetching items with optional extra data or filters given in query parameter

fetching items with optional extra data or filters given in query parameter

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsGetRequest
*/
func (a *DefaultApiService) RestItemsGet(ctx _context.Context) ApiRestItemsGetRequest {
	return ApiRestItemsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ItemPagination
func (a *DefaultApiService) RestItemsGetExecute(r ApiRestItemsGetRequest) ([]ItemPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ItemPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.with != nil {
		t := *r.with
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("with", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("with", parameterToString(t, "multi"))
		}
	}
	if r.lang != nil {
		localVarQueryParams.Add("lang", parameterToString(*r.lang, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.manufacturerId != nil {
		localVarQueryParams.Add("manufacturerId", parameterToString(*r.manufacturerId, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, "csv"))
	}
	if r.flagOne != nil {
		localVarQueryParams.Add("flagOne", parameterToString(*r.flagOne, ""))
	}
	if r.flagTwo != nil {
		localVarQueryParams.Add("flagTwo", parameterToString(*r.flagTwo, ""))
	}
	if r.updatedBetween != nil {
		localVarQueryParams.Add("updatedBetween", parameterToString(*r.updatedBetween, ""))
	}
	if r.variationUpdatedBetween != nil {
		localVarQueryParams.Add("variationUpdatedBetween", parameterToString(*r.variationUpdatedBetween, ""))
	}
	if r.variationRelatedUpdatedBetween != nil {
		localVarQueryParams.Add("variationRelatedUpdatedBetween", parameterToString(*r.variationRelatedUpdatedBetween, ""))
	}
	if r.or != nil {
		localVarQueryParams.Add("or", parameterToString(*r.or, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsItemIdVariationsPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	itemId int32
	variation *Variation
}

func (r ApiRestItemsItemIdVariationsPostRequest) Variation(variation Variation) ApiRestItemsItemIdVariationsPostRequest {
	r.variation = &variation
	return r
}

func (r ApiRestItemsItemIdVariationsPostRequest) Execute() (Variation, *_nethttp.Response, error) {
	return r.ApiService.RestItemsItemIdVariationsPostExecute(r)
}

/*
RestItemsItemIdVariationsPost creating variations for an item

creating variations for an item

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId numeric itemId of the item where the variations belongs to
 @return ApiRestItemsItemIdVariationsPostRequest
*/
func (a *DefaultApiService) RestItemsItemIdVariationsPost(ctx _context.Context, itemId int32) ApiRestItemsItemIdVariationsPostRequest {
	return ApiRestItemsItemIdVariationsPostRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
	}
}

// Execute executes the request
//  @return Variation
func (a *DefaultApiService) RestItemsItemIdVariationsPostExecute(r ApiRestItemsItemIdVariationsPostRequest) (Variation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Variation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsItemIdVariationsPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/{itemId}/variations"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", _neturl.PathEscape(parameterToString(r.itemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.variation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsManufacturersGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	page *int32
	with *[]string
	updatedAt *string
	name *string
}

// Limits the results to a specific page.
func (r ApiRestItemsManufacturersGetRequest) Page(page int32) ApiRestItemsManufacturersGetRequest {
	r.page = &page
	return r
}
func (r ApiRestItemsManufacturersGetRequest) With(with []string) ApiRestItemsManufacturersGetRequest {
	r.with = &with
	return r
}
// Filter restricts the list of results to records updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
func (r ApiRestItemsManufacturersGetRequest) UpdatedAt(updatedAt string) ApiRestItemsManufacturersGetRequest {
	r.updatedAt = &updatedAt
	return r
}
// Filter restricts the list of results to records with specified name.
func (r ApiRestItemsManufacturersGetRequest) Name(name string) ApiRestItemsManufacturersGetRequest {
	r.name = &name
	return r
}

func (r ApiRestItemsManufacturersGetRequest) Execute() (ManufacturersPagination, *_nethttp.Response, error) {
	return r.ApiService.RestItemsManufacturersGetExecute(r)
}

/*
RestItemsManufacturersGet list manufacturers

list manufacturers

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsManufacturersGetRequest
*/
func (a *DefaultApiService) RestItemsManufacturersGet(ctx _context.Context) ApiRestItemsManufacturersGetRequest {
	return ApiRestItemsManufacturersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ManufacturersPagination
func (a *DefaultApiService) RestItemsManufacturersGetExecute(r ApiRestItemsManufacturersGetRequest) (ManufacturersPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ManufacturersPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsManufacturersGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/manufacturers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.with != nil {
		localVarQueryParams.Add("with", parameterToString(*r.with, "csv"))
	}
	if r.updatedAt != nil {
		localVarQueryParams.Add("updatedAt", parameterToString(*r.updatedAt, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsManufacturersPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	manufacturer *Manufacturer
}

func (r ApiRestItemsManufacturersPostRequest) Manufacturer(manufacturer Manufacturer) ApiRestItemsManufacturersPostRequest {
	r.manufacturer = &manufacturer
	return r
}

func (r ApiRestItemsManufacturersPostRequest) Execute() (Manufacturer, *_nethttp.Response, error) {
	return r.ApiService.RestItemsManufacturersPostExecute(r)
}

/*
RestItemsManufacturersPost creates a manufacturer

creates a manufacturer

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsManufacturersPostRequest
*/
func (a *DefaultApiService) RestItemsManufacturersPost(ctx _context.Context) ApiRestItemsManufacturersPostRequest {
	return ApiRestItemsManufacturersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *DefaultApiService) RestItemsManufacturersPostExecute(r ApiRestItemsManufacturersPostRequest) (Manufacturer, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsManufacturersPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/manufacturers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturer
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	itemRequest *[]ItemRequest
}

func (r ApiRestItemsPostRequest) ItemRequest(itemRequest []ItemRequest) ApiRestItemsPostRequest {
	r.itemRequest = &itemRequest
	return r
}

func (r ApiRestItemsPostRequest) Execute() (CreateItemsResponse, *_nethttp.Response, error) {
	return r.ApiService.RestItemsPostExecute(r)
}

/*
RestItemsPost creates items

creates items

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsPostRequest
*/
func (a *DefaultApiService) RestItemsPost(ctx _context.Context) ApiRestItemsPostRequest {
	return ApiRestItemsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateItemsResponse
func (a *DefaultApiService) RestItemsPostExecute(r ApiRestItemsPostRequest) (CreateItemsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateItemsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.itemRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsVariationsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	with *[]string
	lang *string
	page *int32
	itemsPerPage *int32
	id *[]int32
	itemId *[]int32
	variationTagId *[]int32
	itemName *string
	flagOne *int32
	flagTwo *int32
	storeSpecial *float32
	categoryId *int32
	isMain *bool
	isActive *bool
	barcode *string
	numberExact *string
	numberFuzzy *string
	isBundle *bool
	plentyId *[]int32
	referrerId *[]float32
	supplierNumber *string
	sku *string
	manufacturerId *int32
	updatedBetween *string
	createdBetween *string
	relatedUpdatedBetween *string
	itemDescription *string
	stockWarehouseId *string
	supplierId *int32
}

func (r ApiRestItemsVariationsGetRequest) With(with []string) ApiRestItemsVariationsGetRequest {
	r.with = &with
	return r
}
// The language of the variation information.
func (r ApiRestItemsVariationsGetRequest) Lang(lang string) ApiRestItemsVariationsGetRequest {
	r.lang = &lang
	return r
}
// Limits the results to a specific page.
func (r ApiRestItemsVariationsGetRequest) Page(page int32) ApiRestItemsVariationsGetRequest {
	r.page = &page
	return r
}
// Limits the number of results listed per page to a specific number.
func (r ApiRestItemsVariationsGetRequest) ItemsPerPage(itemsPerPage int32) ApiRestItemsVariationsGetRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}
// Filter restricts the list of results to variations with the specified variation ID. An variation ID must be specified. More than one ID should be separated by commas.
func (r ApiRestItemsVariationsGetRequest) Id(id []int32) ApiRestItemsVariationsGetRequest {
	r.id = &id
	return r
}
// Filter restricts the list of results to variations with the specified item ID. An item ID must be specified. More than one ID should be separated by commas.
func (r ApiRestItemsVariationsGetRequest) ItemId(itemId []int32) ApiRestItemsVariationsGetRequest {
	r.itemId = &itemId
	return r
}
// Filter restricts the list of results to variations with the specified item name. An item name must be specified.
func (r ApiRestItemsVariationsGetRequest) VariationTagId(variationTagId []int32) ApiRestItemsVariationsGetRequest {
	r.variationTagId = &variationTagId
	return r
}
// Filter restricts the list of results to variations with the specified item name
func (r ApiRestItemsVariationsGetRequest) ItemName(itemName string) ApiRestItemsVariationsGetRequest {
	r.itemName = &itemName
	return r
}
// Filter restricts the list of results to variations of items with the flag one.
func (r ApiRestItemsVariationsGetRequest) FlagOne(flagOne int32) ApiRestItemsVariationsGetRequest {
	r.flagOne = &flagOne
	return r
}
// Filter restricts the list of results to variations of items with the flag two.
func (r ApiRestItemsVariationsGetRequest) FlagTwo(flagTwo int32) ApiRestItemsVariationsGetRequest {
	r.flagTwo = &flagTwo
	return r
}
// Filter restricts the list of results to variations of items with the specified store special. The following values are allowed: 0 (None), 1 (Special offer), 2 (New item), 3 (Top item)
func (r ApiRestItemsVariationsGetRequest) StoreSpecial(storeSpecial float32) ApiRestItemsVariationsGetRequest {
	r.storeSpecial = &storeSpecial
	return r
}
// Filter restricts the list of results to variations with the specified category id
func (r ApiRestItemsVariationsGetRequest) CategoryId(categoryId int32) ApiRestItemsVariationsGetRequest {
	r.categoryId = &categoryId
	return r
}
// Filter restricts the list of results to variations that are main variations.
func (r ApiRestItemsVariationsGetRequest) IsMain(isMain bool) ApiRestItemsVariationsGetRequest {
	r.isMain = &isMain
	return r
}
// Filter restricts the list of results to variations that are active.
func (r ApiRestItemsVariationsGetRequest) IsActive(isActive bool) ApiRestItemsVariationsGetRequest {
	r.isActive = &isActive
	return r
}
// Filter restricts the list of results to variations with the specified barcode.
func (r ApiRestItemsVariationsGetRequest) Barcode(barcode string) ApiRestItemsVariationsGetRequest {
	r.barcode = &barcode
	return r
}
// Filter restricts the list of results to the variation with the variation number specified.
func (r ApiRestItemsVariationsGetRequest) NumberExact(numberExact string) ApiRestItemsVariationsGetRequest {
	r.numberExact = &numberExact
	return r
}
// Filter restricts the list of results to variations with numbers that contain the variation number specified (SQL LIKE operator). For example, if variations with variation numbers 1 to 400 exist in the system, filtering by 12 will list variation numbers 12, 112, 120-129, 212 and 312.
func (r ApiRestItemsVariationsGetRequest) NumberFuzzy(numberFuzzy string) ApiRestItemsVariationsGetRequest {
	r.numberFuzzy = &numberFuzzy
	return r
}
// Filter restricts the list of results to variations to which variations were added to create a bundle.
func (r ApiRestItemsVariationsGetRequest) IsBundle(isBundle bool) ApiRestItemsVariationsGetRequest {
	r.isBundle = &isBundle
	return r
}
// Filter restricts the list of results to variations that are visible in specified clients. Separate more than one client by commas.
func (r ApiRestItemsVariationsGetRequest) PlentyId(plentyId []int32) ApiRestItemsVariationsGetRequest {
	r.plentyId = &plentyId
	return r
}
// Filter restricts the list of results to variations that are visible in specified markets. Separate more than one referrer by commas.
func (r ApiRestItemsVariationsGetRequest) ReferrerId(referrerId []float32) ApiRestItemsVariationsGetRequest {
	r.referrerId = &referrerId
	return r
}
// Filter restricts the list of results to variations with the specified supplier number.
func (r ApiRestItemsVariationsGetRequest) SupplierNumber(supplierNumber string) ApiRestItemsVariationsGetRequest {
	r.supplierNumber = &supplierNumber
	return r
}
// Filter restricts the list of results to variations with the specified SKU. In additional, results can also be restricted to a specific referrer by specifying the referrer ID after a colon. Example: L0R3MIP5UM:104.1
func (r ApiRestItemsVariationsGetRequest) Sku(sku string) ApiRestItemsVariationsGetRequest {
	r.sku = &sku
	return r
}
// Filter restricts the list of results to variations with the specified manufacturer ID.
func (r ApiRestItemsVariationsGetRequest) ManufacturerId(manufacturerId int32) ApiRestItemsVariationsGetRequest {
	r.manufacturerId = &manufacturerId
	return r
}
// Filter restricts the list of results to variations updated during the specified period. The end date (to) is optional. If no end date is specified, variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?updatedBetween&#x3D;1451606400,1456790400 will list variations updated between 2016-01-01 and 2016-03-01. .../variations?updatedBetween&#x3D;1451606400 will list variations updated since 2016-01-01. The PHP function strtotime is also supported.
func (r ApiRestItemsVariationsGetRequest) UpdatedBetween(updatedBetween string) ApiRestItemsVariationsGetRequest {
	r.updatedBetween = &updatedBetween
	return r
}
// Filter restricts the list of results to variations created during the specified period. The end date (to) is optional. If no end date is specified, variations created between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?createdBetween&#x3D;1451606400,1456790400 will list variations created between 2016-01-01 and 2016-03-01. .../variations?createdBetween&#x3D;1451606400 will list variations created since 2016-01-01. The PHP function strtotime is also supported.
func (r ApiRestItemsVariationsGetRequest) CreatedBetween(createdBetween string) ApiRestItemsVariationsGetRequest {
	r.createdBetween = &createdBetween
	return r
}
// Filter restricts the list of results to those variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
func (r ApiRestItemsVariationsGetRequest) RelatedUpdatedBetween(relatedUpdatedBetween string) ApiRestItemsVariationsGetRequest {
	r.relatedUpdatedBetween = &relatedUpdatedBetween
	return r
}
// Filter restricts the list of results to variations with descriptions that contain the specified string.
func (r ApiRestItemsVariationsGetRequest) ItemDescription(itemDescription string) ApiRestItemsVariationsGetRequest {
	r.itemDescription = &itemDescription
	return r
}
// Filter restricts the list of results to variations which have physical stock on the given warehouse.
func (r ApiRestItemsVariationsGetRequest) StockWarehouseId(stockWarehouseId string) ApiRestItemsVariationsGetRequest {
	r.stockWarehouseId = &stockWarehouseId
	return r
}
// Filter restricts the list of results to variations with the specified supplier ID.
func (r ApiRestItemsVariationsGetRequest) SupplierId(supplierId int32) ApiRestItemsVariationsGetRequest {
	r.supplierId = &supplierId
	return r
}

func (r ApiRestItemsVariationsGetRequest) Execute() (VariationPagination, *_nethttp.Response, error) {
	return r.ApiService.RestItemsVariationsGetExecute(r)
}

/*
RestItemsVariationsGet fetching variations with pagination and the possibility to fetch additional related data by 'with' query param

fetching variations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsVariationsGetRequest
*/
func (a *DefaultApiService) RestItemsVariationsGet(ctx _context.Context) ApiRestItemsVariationsGetRequest {
	return ApiRestItemsVariationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VariationPagination
func (a *DefaultApiService) RestItemsVariationsGetExecute(r ApiRestItemsVariationsGetRequest) (VariationPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VariationPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsVariationsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/variations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.with != nil {
		localVarQueryParams.Add("with", parameterToString(*r.with, "csv"))
	}
	if r.lang != nil {
		localVarQueryParams.Add("lang", parameterToString(*r.lang, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, "csv"))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("itemId", parameterToString(*r.itemId, "csv"))
	}
	if r.variationTagId != nil {
		localVarQueryParams.Add("variationTagId", parameterToString(*r.variationTagId, "csv"))
	}
	if r.itemName != nil {
		localVarQueryParams.Add("itemName", parameterToString(*r.itemName, ""))
	}
	if r.flagOne != nil {
		localVarQueryParams.Add("flagOne", parameterToString(*r.flagOne, ""))
	}
	if r.flagTwo != nil {
		localVarQueryParams.Add("flagTwo", parameterToString(*r.flagTwo, ""))
	}
	if r.storeSpecial != nil {
		localVarQueryParams.Add("storeSpecial", parameterToString(*r.storeSpecial, ""))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, ""))
	}
	if r.isMain != nil {
		localVarQueryParams.Add("isMain", parameterToString(*r.isMain, ""))
	}
	if r.isActive != nil {
		localVarQueryParams.Add("isActive", parameterToString(*r.isActive, ""))
	}
	if r.barcode != nil {
		localVarQueryParams.Add("barcode", parameterToString(*r.barcode, ""))
	}
	if r.numberExact != nil {
		localVarQueryParams.Add("numberExact", parameterToString(*r.numberExact, ""))
	}
	if r.numberFuzzy != nil {
		localVarQueryParams.Add("numberFuzzy", parameterToString(*r.numberFuzzy, ""))
	}
	if r.isBundle != nil {
		localVarQueryParams.Add("isBundle", parameterToString(*r.isBundle, ""))
	}
	if r.plentyId != nil {
		localVarQueryParams.Add("plentyId", parameterToString(*r.plentyId, "csv"))
	}
	if r.referrerId != nil {
		localVarQueryParams.Add("referrerId", parameterToString(*r.referrerId, "csv"))
	}
	if r.supplierNumber != nil {
		localVarQueryParams.Add("supplierNumber", parameterToString(*r.supplierNumber, ""))
	}
	if r.sku != nil {
		localVarQueryParams.Add("sku", parameterToString(*r.sku, ""))
	}
	if r.manufacturerId != nil {
		localVarQueryParams.Add("manufacturerId", parameterToString(*r.manufacturerId, ""))
	}
	if r.updatedBetween != nil {
		localVarQueryParams.Add("updatedBetween", parameterToString(*r.updatedBetween, ""))
	}
	if r.createdBetween != nil {
		localVarQueryParams.Add("createdBetween", parameterToString(*r.createdBetween, ""))
	}
	if r.relatedUpdatedBetween != nil {
		localVarQueryParams.Add("relatedUpdatedBetween", parameterToString(*r.relatedUpdatedBetween, ""))
	}
	if r.itemDescription != nil {
		localVarQueryParams.Add("itemDescription", parameterToString(*r.itemDescription, ""))
	}
	if r.stockWarehouseId != nil {
		localVarQueryParams.Add("stockWarehouseId", parameterToString(*r.stockWarehouseId, ""))
	}
	if r.supplierId != nil {
		localVarQueryParams.Add("supplierId", parameterToString(*r.supplierId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestItemsVariationsPutRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	variation *[]Variation
}

func (r ApiRestItemsVariationsPutRequest) Variation(variation []Variation) ApiRestItemsVariationsPutRequest {
	r.variation = &variation
	return r
}

func (r ApiRestItemsVariationsPutRequest) Execute() (MultipleVariationsUpdatedResponse, *_nethttp.Response, error) {
	return r.ApiService.RestItemsVariationsPutExecute(r)
}

/*
RestItemsVariationsPut updating up to 50 variations

updating up to 50 variations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestItemsVariationsPutRequest
*/
func (a *DefaultApiService) RestItemsVariationsPut(ctx _context.Context) ApiRestItemsVariationsPutRequest {
	return ApiRestItemsVariationsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MultipleVariationsUpdatedResponse
func (a *DefaultApiService) RestItemsVariationsPutExecute(r ApiRestItemsVariationsPutRequest) (MultipleVariationsUpdatedResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleVariationsUpdatedResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestItemsVariationsPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/items/variations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.variation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestLoginPostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	restLoginBody *RestLoginBody
}

func (r ApiRestLoginPostRequest) RestLoginBody(restLoginBody RestLoginBody) ApiRestLoginPostRequest {
	r.restLoginBody = &restLoginBody
	return r
}

func (r ApiRestLoginPostRequest) Execute() (RestLoginResponse, *_nethttp.Response, error) {
	return r.ApiService.RestLoginPostExecute(r)
}

/*
RestLoginPost login for authentication at rest api

needed for authenticate at the plentymarkets rest api

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestLoginPostRequest
*/
func (a *DefaultApiService) RestLoginPost(ctx _context.Context) ApiRestLoginPostRequest {
	return ApiRestLoginPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RestLoginResponse
func (a *DefaultApiService) RestLoginPostExecute(r ApiRestLoginPostRequest) (RestLoginResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RestLoginResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestLoginPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/login"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.restLoginBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestOrdersSearchGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orderId *int32
	plentyId *int32
	orderTypeId *string
	statusId *float32
	referrerId *float32
	ownerId *int32
	locationId *int32
	updatedAt *time.Time
	createdAt *string
	lockStatus *string
	orderAddressData *string
	contactData *string
	orderItemTypeId *int32
	itemId *int32
	itemVariationId *int32
	variationNumber *string
	orderItemName *string
	documentNumber *string
	hasValidInvoice *bool
	packageNumbber *string
	contactClassId *string
	itemManufacturerId *int32
	orderItemWarehouseId *int32
	invoiceTotalSystemCurrency *float32
	isDeliveryAddressPackingStation *bool
	serialNumber *string
	isGuestContact *bool
	variationSupplierId *int32
	orderItemReferrerId *float32
	tag *int32
	excludeMainOrders *bool
	soldCouponCode *string
	redeemedCouponCode *string
	orderBillingAddressCountryId *int32
	orderDeliveryAddressCountryId *int32
	shippingServiceProviderId *int32
	shippingServiceProviderType *string
	shippingStatus *string
	shippingShipmentDate *string
	sortBy *string
	sortOrder *string
	page *int32
	itemsPerPage *int32
	with *[]string
	lazyLoaded *bool
}

func (r ApiRestOrdersSearchGetRequest) OrderId(orderId int32) ApiRestOrdersSearchGetRequest {
	r.orderId = &orderId
	return r
}
func (r ApiRestOrdersSearchGetRequest) PlentyId(plentyId int32) ApiRestOrdersSearchGetRequest {
	r.plentyId = &plentyId
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderTypeId(orderTypeId string) ApiRestOrdersSearchGetRequest {
	r.orderTypeId = &orderTypeId
	return r
}
func (r ApiRestOrdersSearchGetRequest) StatusId(statusId float32) ApiRestOrdersSearchGetRequest {
	r.statusId = &statusId
	return r
}
func (r ApiRestOrdersSearchGetRequest) ReferrerId(referrerId float32) ApiRestOrdersSearchGetRequest {
	r.referrerId = &referrerId
	return r
}
func (r ApiRestOrdersSearchGetRequest) OwnerId(ownerId int32) ApiRestOrdersSearchGetRequest {
	r.ownerId = &ownerId
	return r
}
func (r ApiRestOrdersSearchGetRequest) LocationId(locationId int32) ApiRestOrdersSearchGetRequest {
	r.locationId = &locationId
	return r
}
func (r ApiRestOrdersSearchGetRequest) UpdatedAt(updatedAt time.Time) ApiRestOrdersSearchGetRequest {
	r.updatedAt = &updatedAt
	return r
}
func (r ApiRestOrdersSearchGetRequest) CreatedAt(createdAt string) ApiRestOrdersSearchGetRequest {
	r.createdAt = &createdAt
	return r
}
func (r ApiRestOrdersSearchGetRequest) LockStatus(lockStatus string) ApiRestOrdersSearchGetRequest {
	r.lockStatus = &lockStatus
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderAddressData(orderAddressData string) ApiRestOrdersSearchGetRequest {
	r.orderAddressData = &orderAddressData
	return r
}
func (r ApiRestOrdersSearchGetRequest) ContactData(contactData string) ApiRestOrdersSearchGetRequest {
	r.contactData = &contactData
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderItemTypeId(orderItemTypeId int32) ApiRestOrdersSearchGetRequest {
	r.orderItemTypeId = &orderItemTypeId
	return r
}
func (r ApiRestOrdersSearchGetRequest) ItemId(itemId int32) ApiRestOrdersSearchGetRequest {
	r.itemId = &itemId
	return r
}
func (r ApiRestOrdersSearchGetRequest) ItemVariationId(itemVariationId int32) ApiRestOrdersSearchGetRequest {
	r.itemVariationId = &itemVariationId
	return r
}
func (r ApiRestOrdersSearchGetRequest) VariationNumber(variationNumber string) ApiRestOrdersSearchGetRequest {
	r.variationNumber = &variationNumber
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderItemName(orderItemName string) ApiRestOrdersSearchGetRequest {
	r.orderItemName = &orderItemName
	return r
}
func (r ApiRestOrdersSearchGetRequest) DocumentNumber(documentNumber string) ApiRestOrdersSearchGetRequest {
	r.documentNumber = &documentNumber
	return r
}
func (r ApiRestOrdersSearchGetRequest) HasValidInvoice(hasValidInvoice bool) ApiRestOrdersSearchGetRequest {
	r.hasValidInvoice = &hasValidInvoice
	return r
}
func (r ApiRestOrdersSearchGetRequest) PackageNumbber(packageNumbber string) ApiRestOrdersSearchGetRequest {
	r.packageNumbber = &packageNumbber
	return r
}
func (r ApiRestOrdersSearchGetRequest) ContactClassId(contactClassId string) ApiRestOrdersSearchGetRequest {
	r.contactClassId = &contactClassId
	return r
}
func (r ApiRestOrdersSearchGetRequest) ItemManufacturerId(itemManufacturerId int32) ApiRestOrdersSearchGetRequest {
	r.itemManufacturerId = &itemManufacturerId
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderItemWarehouseId(orderItemWarehouseId int32) ApiRestOrdersSearchGetRequest {
	r.orderItemWarehouseId = &orderItemWarehouseId
	return r
}
func (r ApiRestOrdersSearchGetRequest) InvoiceTotalSystemCurrency(invoiceTotalSystemCurrency float32) ApiRestOrdersSearchGetRequest {
	r.invoiceTotalSystemCurrency = &invoiceTotalSystemCurrency
	return r
}
func (r ApiRestOrdersSearchGetRequest) IsDeliveryAddressPackingStation(isDeliveryAddressPackingStation bool) ApiRestOrdersSearchGetRequest {
	r.isDeliveryAddressPackingStation = &isDeliveryAddressPackingStation
	return r
}
func (r ApiRestOrdersSearchGetRequest) SerialNumber(serialNumber string) ApiRestOrdersSearchGetRequest {
	r.serialNumber = &serialNumber
	return r
}
func (r ApiRestOrdersSearchGetRequest) IsGuestContact(isGuestContact bool) ApiRestOrdersSearchGetRequest {
	r.isGuestContact = &isGuestContact
	return r
}
func (r ApiRestOrdersSearchGetRequest) VariationSupplierId(variationSupplierId int32) ApiRestOrdersSearchGetRequest {
	r.variationSupplierId = &variationSupplierId
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderItemReferrerId(orderItemReferrerId float32) ApiRestOrdersSearchGetRequest {
	r.orderItemReferrerId = &orderItemReferrerId
	return r
}
func (r ApiRestOrdersSearchGetRequest) Tag(tag int32) ApiRestOrdersSearchGetRequest {
	r.tag = &tag
	return r
}
func (r ApiRestOrdersSearchGetRequest) ExcludeMainOrders(excludeMainOrders bool) ApiRestOrdersSearchGetRequest {
	r.excludeMainOrders = &excludeMainOrders
	return r
}
func (r ApiRestOrdersSearchGetRequest) SoldCouponCode(soldCouponCode string) ApiRestOrdersSearchGetRequest {
	r.soldCouponCode = &soldCouponCode
	return r
}
func (r ApiRestOrdersSearchGetRequest) RedeemedCouponCode(redeemedCouponCode string) ApiRestOrdersSearchGetRequest {
	r.redeemedCouponCode = &redeemedCouponCode
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderBillingAddressCountryId(orderBillingAddressCountryId int32) ApiRestOrdersSearchGetRequest {
	r.orderBillingAddressCountryId = &orderBillingAddressCountryId
	return r
}
func (r ApiRestOrdersSearchGetRequest) OrderDeliveryAddressCountryId(orderDeliveryAddressCountryId int32) ApiRestOrdersSearchGetRequest {
	r.orderDeliveryAddressCountryId = &orderDeliveryAddressCountryId
	return r
}
func (r ApiRestOrdersSearchGetRequest) ShippingServiceProviderId(shippingServiceProviderId int32) ApiRestOrdersSearchGetRequest {
	r.shippingServiceProviderId = &shippingServiceProviderId
	return r
}
func (r ApiRestOrdersSearchGetRequest) ShippingServiceProviderType(shippingServiceProviderType string) ApiRestOrdersSearchGetRequest {
	r.shippingServiceProviderType = &shippingServiceProviderType
	return r
}
func (r ApiRestOrdersSearchGetRequest) ShippingStatus(shippingStatus string) ApiRestOrdersSearchGetRequest {
	r.shippingStatus = &shippingStatus
	return r
}
func (r ApiRestOrdersSearchGetRequest) ShippingShipmentDate(shippingShipmentDate string) ApiRestOrdersSearchGetRequest {
	r.shippingShipmentDate = &shippingShipmentDate
	return r
}
func (r ApiRestOrdersSearchGetRequest) SortBy(sortBy string) ApiRestOrdersSearchGetRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiRestOrdersSearchGetRequest) SortOrder(sortOrder string) ApiRestOrdersSearchGetRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiRestOrdersSearchGetRequest) Page(page int32) ApiRestOrdersSearchGetRequest {
	r.page = &page
	return r
}
func (r ApiRestOrdersSearchGetRequest) ItemsPerPage(itemsPerPage int32) ApiRestOrdersSearchGetRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}
func (r ApiRestOrdersSearchGetRequest) With(with []string) ApiRestOrdersSearchGetRequest {
	r.with = &with
	return r
}
func (r ApiRestOrdersSearchGetRequest) LazyLoaded(lazyLoaded bool) ApiRestOrdersSearchGetRequest {
	r.lazyLoaded = &lazyLoaded
	return r
}

func (r ApiRestOrdersSearchGetRequest) Execute() (SearchOrderPagination, *_nethttp.Response, error) {
	return r.ApiService.RestOrdersSearchGetExecute(r)
}

/*
RestOrdersSearchGet searches for orders. The results can be restricted by using filters

search for orders

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestOrdersSearchGetRequest
*/
func (a *DefaultApiService) RestOrdersSearchGet(ctx _context.Context) ApiRestOrdersSearchGetRequest {
	return ApiRestOrdersSearchGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchOrderPagination
func (a *DefaultApiService) RestOrdersSearchGetExecute(r ApiRestOrdersSearchGetRequest) (SearchOrderPagination, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SearchOrderPagination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestOrdersSearchGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/orders/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.orderId != nil {
		localVarQueryParams.Add("orderId", parameterToString(*r.orderId, ""))
	}
	if r.plentyId != nil {
		localVarQueryParams.Add("plentyId", parameterToString(*r.plentyId, ""))
	}
	if r.orderTypeId != nil {
		localVarQueryParams.Add("orderTypeId", parameterToString(*r.orderTypeId, ""))
	}
	if r.statusId != nil {
		localVarQueryParams.Add("statusId", parameterToString(*r.statusId, ""))
	}
	if r.referrerId != nil {
		localVarQueryParams.Add("referrerId", parameterToString(*r.referrerId, ""))
	}
	if r.ownerId != nil {
		localVarQueryParams.Add("ownerId", parameterToString(*r.ownerId, ""))
	}
	if r.locationId != nil {
		localVarQueryParams.Add("locationId", parameterToString(*r.locationId, ""))
	}
	if r.updatedAt != nil {
		localVarQueryParams.Add("updatedAt", parameterToString(*r.updatedAt, ""))
	}
	if r.createdAt != nil {
		localVarQueryParams.Add("createdAt", parameterToString(*r.createdAt, ""))
	}
	if r.lockStatus != nil {
		localVarQueryParams.Add("lockStatus", parameterToString(*r.lockStatus, ""))
	}
	if r.orderAddressData != nil {
		localVarQueryParams.Add("orderAddressData", parameterToString(*r.orderAddressData, ""))
	}
	if r.contactData != nil {
		localVarQueryParams.Add("contactData", parameterToString(*r.contactData, ""))
	}
	if r.orderItemTypeId != nil {
		localVarQueryParams.Add("orderItemTypeId", parameterToString(*r.orderItemTypeId, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("itemId", parameterToString(*r.itemId, ""))
	}
	if r.itemVariationId != nil {
		localVarQueryParams.Add("itemVariationId", parameterToString(*r.itemVariationId, ""))
	}
	if r.variationNumber != nil {
		localVarQueryParams.Add("variationNumber", parameterToString(*r.variationNumber, ""))
	}
	if r.orderItemName != nil {
		localVarQueryParams.Add("orderItemName", parameterToString(*r.orderItemName, ""))
	}
	if r.documentNumber != nil {
		localVarQueryParams.Add("documentNumber", parameterToString(*r.documentNumber, ""))
	}
	if r.hasValidInvoice != nil {
		localVarQueryParams.Add("hasValidInvoice", parameterToString(*r.hasValidInvoice, ""))
	}
	if r.packageNumbber != nil {
		localVarQueryParams.Add("packageNumbber", parameterToString(*r.packageNumbber, ""))
	}
	if r.contactClassId != nil {
		localVarQueryParams.Add("contactClassId", parameterToString(*r.contactClassId, ""))
	}
	if r.itemManufacturerId != nil {
		localVarQueryParams.Add("itemManufacturerId", parameterToString(*r.itemManufacturerId, ""))
	}
	if r.orderItemWarehouseId != nil {
		localVarQueryParams.Add("orderItemWarehouseId", parameterToString(*r.orderItemWarehouseId, ""))
	}
	if r.invoiceTotalSystemCurrency != nil {
		localVarQueryParams.Add("invoiceTotalSystemCurrency", parameterToString(*r.invoiceTotalSystemCurrency, ""))
	}
	if r.isDeliveryAddressPackingStation != nil {
		localVarQueryParams.Add("isDeliveryAddressPackingStation", parameterToString(*r.isDeliveryAddressPackingStation, ""))
	}
	if r.serialNumber != nil {
		localVarQueryParams.Add("serialNumber", parameterToString(*r.serialNumber, ""))
	}
	if r.isGuestContact != nil {
		localVarQueryParams.Add("isGuestContact", parameterToString(*r.isGuestContact, ""))
	}
	if r.variationSupplierId != nil {
		localVarQueryParams.Add("variationSupplierId", parameterToString(*r.variationSupplierId, ""))
	}
	if r.orderItemReferrerId != nil {
		localVarQueryParams.Add("orderItemReferrerId", parameterToString(*r.orderItemReferrerId, ""))
	}
	if r.tag != nil {
		localVarQueryParams.Add("tag", parameterToString(*r.tag, ""))
	}
	if r.excludeMainOrders != nil {
		localVarQueryParams.Add("excludeMainOrders", parameterToString(*r.excludeMainOrders, ""))
	}
	if r.soldCouponCode != nil {
		localVarQueryParams.Add("soldCouponCode", parameterToString(*r.soldCouponCode, ""))
	}
	if r.redeemedCouponCode != nil {
		localVarQueryParams.Add("redeemedCouponCode", parameterToString(*r.redeemedCouponCode, ""))
	}
	if r.orderBillingAddressCountryId != nil {
		localVarQueryParams.Add("orderBillingAddressCountryId", parameterToString(*r.orderBillingAddressCountryId, ""))
	}
	if r.orderDeliveryAddressCountryId != nil {
		localVarQueryParams.Add("orderDeliveryAddressCountryId", parameterToString(*r.orderDeliveryAddressCountryId, ""))
	}
	if r.shippingServiceProviderId != nil {
		localVarQueryParams.Add("shippingServiceProviderId", parameterToString(*r.shippingServiceProviderId, ""))
	}
	if r.shippingServiceProviderType != nil {
		localVarQueryParams.Add("shippingServiceProviderType", parameterToString(*r.shippingServiceProviderType, ""))
	}
	if r.shippingStatus != nil {
		localVarQueryParams.Add("shippingStatus", parameterToString(*r.shippingStatus, ""))
	}
	if r.shippingShipmentDate != nil {
		localVarQueryParams.Add("shippingShipmentDate", parameterToString(*r.shippingShipmentDate, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	if r.with != nil {
		t := *r.with
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("with[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("with[]", parameterToString(t, "multi"))
		}
	}
	if r.lazyLoaded != nil {
		localVarQueryParams.Add("lazyLoaded", parameterToString(*r.lazyLoaded, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestPimVariationsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	with *[]string
	sortBy *string
	groupBy *string
	ids *string
	itemId *int32
	itemIds *string
	isActive *bool
	isMain *bool
	isSalable *bool
	supplierId *int32
	availabilityIds *string
	hasChildren *bool
	hasActiveChildren *bool
	attributeId *int32
	anyAttributeId *string
	allAttributeIds *string
	attributeValueId *int32
	anyAttributeValueId *string
	allAttributeValueIds *string
	barcodeCode *string
	barcodeId *int32
	bundleType *string
	categoryId *int32
	anyCategoryId *string
	allCategoryIds *string
	anyCharacteristicId *string
	allCharacteristicIds *string
	clientId *int32
	anyClientId *string
	allClientIds *string
	automaticClientVisibilities *string
	imageHasMarketId *float32
	flag1 *int32
	flag2 *int32
	manufacturerId *int32
	anyManufacturerId *string
	itemType *string
	marketId *float32
	anyMarketId *string
	allMarketIds *string
	priceBetween *string
	priceBetweenById *string
	anySalesPriceId *string
	propertySelectionId *int32
	anyPropertySelectionId *string
	allPropertySelectionIds *string
	hasNameInLanguage *string
	createdAt *string
	updatedAt *string
	itemCreatedAt *string
	itemUpdatedAt *string
	availabilityUpdatedAt *string
	stockUpdatedAt *string
	page *int32
	itemsPerPage *int32
}

// Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:&lt;ul&gt;&lt;li&gt;&#39;additionalSkus&#39; &#x3D; The additional skus of the variation.&lt;/li&gt;&lt;li&gt;&#39;attributeValues&#39; &#x3D; The attribute values of the variation.&lt;/li&gt;&lt;li&gt;&#39;attributeValues.attribute&#39;/b&gt; &#x3D; Includes attributeValues. The attribute data to the related attribute ID.&lt;/li&gt;&lt;li&gt;&#39;attributeValues.attributeValue&#39; &#x3D; Includes attributeValues. The attribute value data to the related attribute value ID.&lt;/li&gt;&lt;li&gt;&#39;barcodes&#39; &#x3D; The barcodes of the variation.&lt;/li&gt;&lt;li&gt;&#39;barcodes.barcode&#39; &#x3D; Includes barcodes. The barcode data to the related barcode ID.&lt;/li&gt;&lt;li&gt;&#39;base&#39; &#x3D; The variation base.&lt;/li&gt;&lt;li&gt;&#39;base.item&#39; &#x3D; Includes base. The item data of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.itemSerialNumber&#39; &#x3D; Includes base. The item serial numbers of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.feedback&#39; &#x3D; Includes base. The feedback of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.characteristics&#39; &#x3D; Includes base. The characteristics of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.crossSelling&#39; &#x3D; Includes base. The cross selling items of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.texts&#39; &#x3D; Includes base. The texts of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.availability&#39; &#x3D; Includes base. The availability data related to the variation&#39;s availability ID.&lt;/li&gt;&lt;li&gt;&#39;base.images&#39; &#x3D; Includes base. The images linked to the item.&lt;/li&gt;&lt;li&gt;&#39;base.shippingProfiles&#39; &#x3D; Includes base. The shipping profiles linked to the item.&lt;/li&gt;&lt;li&gt;&#39;base.stock&#39; &#x3D; Includes base. The stock of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.stockStorageLocations&#39; &#x3D; Includes base. The stock storage locations of the variation.&lt;/li&gt;&lt;li&gt;&#39;bundleComponents&#39; &#x3D; The bundle components of the variation.&lt;/li&gt;&lt;li&gt;&#39;categories&#39; &#x3D; The categories of the variation.&lt;/li&gt;&lt;li&gt;&#39;categories.category&#39; &#x3D; Includes categories. The related category data for each category ID.&lt;/li&gt;&lt;li&gt;&#39;categories.categoryBranch&#39; &#x3D; Includes categories. The related category branch data for each category ID.&lt;/li&gt;&lt;li&gt;&#39;clients&#39; &#x3D; The clients of the variation.&lt;/li&gt;&lt;li&gt;&#39;defaultCategories&#39; &#x3D; The default categories of the variation&lt;/li&gt;&lt;li&gt;&#39;defaultCategories.category&#39; &#x3D; Includes defaultCategories. The category data to the related category ID.&lt;/li&gt;&lt;li&gt;&#39;images&#39; &#x3D; The images of the variation&lt;/li&gt;&lt;li&gt;&#39;images.image&#39; &#x3D; Includes images. The image data to the related image ID.&lt;/li&gt;&lt;li&gt;&#39;markets&#39; &#x3D; The markets of the variation.&lt;/li&gt;&lt;li&gt;&#39;marketIdentNumbers&#39; &#x3D; The market ident numbers of the variation&lt;/li&gt;&lt;li&gt;&#39;salesPrices&#39; &#x3D; The sales prices of the variation.&lt;/li&gt;&lt;li&gt;&#39;salesPrices.salesPrice&#39; &#x3D; Includes salesPrices. The sales price data to the related sales price ID.&lt;/li&gt;&lt;li&gt;&#39;skus&#39; &#x3D; The skus of the variation.&lt;/li&gt;&lt;li&gt;&#39;supplier&#39; &#x3D; The supplier of the variation.&lt;/li&gt;&lt;li&gt;&#39;supplier.supplier&#39; &#x3D; Includes supplier. The contact data to the related supplier ID.&lt;/li&gt;&lt;li&gt;&#39;timestamps&#39; &#x3D; The timetamps of the variation.&lt;/li&gt;&lt;li&gt;&#39;warehouses&#39; &#x3D; The warehouses of the variation&lt;/li&gt;&lt;li&gt;&#39;warehouses.warehouse&#39; &#x3D; Includes warehouses. The warehouse data to the related warehouse ID.&lt;/li&gt;&lt;li&gt;&#39;unit&#39; &#x3D; The unit of the variation&lt;/li&gt;&lt;li&gt;&#39;unit.unit&#39; &#x3D; Includes unit. The unit data of the related unit ID.&lt;/li&gt;&lt;li&gt;&#39;tags&#39; &#x3D; The tags of the variation.&lt;/li&gt;&lt;li&gt;&#39;tags.tag&#39; &#x3D; Includes tags. The tag data to the related tag ID.&lt;/li&gt;&lt;li&gt;&#39;properties&#39; &#x3D; The properties of the variation.&lt;/li&gt;&lt;li&gt;&#39;properties.property&#39; &#x3D; Includes properties. The property data to the related property ID.&lt;/li&gt;&lt;/ul&gt;
func (r ApiRestPimVariationsGetRequest) With(with []string) ApiRestPimVariationsGetRequest {
	r.with = &with
	return r
}
// Sorts the results. Append &#39;_asc&#39; or &#39;_desc&#39; to specify the sorting order. &#39;_desc&#39; is the default value if no other is specified. More than one parameter should be separated by commas. The following parameters are available:&lt;ul&gt;&lt;li&gt;&#39;id&#39;&lt;/li&gt;&lt;li&gt;&#39;itemId&#39;&lt;/li&gt;&lt;li&gt;&#39;isMain&#39;&lt;/li&gt;&lt;li&gt;&#39;position&#39;&lt;/li&gt;&lt;li&gt;&#39;availabilityId&#39;&lt;/li&gt;&lt;li&gt;&#39;createdAt&#39;&lt;/li&gt;&lt;li&gt;&#39;updatedAt&#39;&lt;/li&gt;&lt;li&gt;&#39;itemUpdatedAt&#39;&lt;/li&gt;&lt;li&gt;&#39;relatedUpdatedAt&#39;&lt;/li&gt;&lt;li&gt;&#39;variationName&#39;&lt;/li&gt;&lt;li&gt;&#39;number&#39;&lt;/li&gt;&lt;/ul&gt;
func (r ApiRestPimVariationsGetRequest) SortBy(sortBy string) ApiRestPimVariationsGetRequest {
	r.sortBy = &sortBy
	return r
}
// Groups the result. The following parameters are available:&lt;ul&gt;&lt;li&gt;&#39;itemId&#39; &#x3D; Groups the result by the item ID.&lt;/li&gt;&lt;li&gt;&#39;itemAttributeValue&#39; &#x3D; Groups the result by the attribute with the flag &#39;isGroupable&#39;.&lt;/li&gt;&lt;/ul&gt;
func (r ApiRestPimVariationsGetRequest) GroupBy(groupBy string) ApiRestPimVariationsGetRequest {
	r.groupBy = &groupBy
	return r
}
// Filter restricts the list of results to variations with the specified IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) Ids(ids string) ApiRestPimVariationsGetRequest {
	r.ids = &ids
	return r
}
// Filter restricts the list of results to variations with the specified item ID.
func (r ApiRestPimVariationsGetRequest) ItemId(itemId int32) ApiRestPimVariationsGetRequest {
	r.itemId = &itemId
	return r
}
// Filter restricts the list of results to variations with the specified item IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) ItemIds(itemIds string) ApiRestPimVariationsGetRequest {
	r.itemIds = &itemIds
	return r
}
// Filter restricts the list of results to variations which are active/inactive.
func (r ApiRestPimVariationsGetRequest) IsActive(isActive bool) ApiRestPimVariationsGetRequest {
	r.isActive = &isActive
	return r
}
// Filter restricts the list of results to variations which are main/not main.
func (r ApiRestPimVariationsGetRequest) IsMain(isMain bool) ApiRestPimVariationsGetRequest {
	r.isMain = &isMain
	return r
}
// Filter restricts the list of results to variations which are salable.
func (r ApiRestPimVariationsGetRequest) IsSalable(isSalable bool) ApiRestPimVariationsGetRequest {
	r.isSalable = &isSalable
	return r
}
// Filter restricts the list of results to variations which have the given supplier ID.
func (r ApiRestPimVariationsGetRequest) SupplierId(supplierId int32) ApiRestPimVariationsGetRequest {
	r.supplierId = &supplierId
	return r
}
// Filter restricts the list of results to variations with the specified availability IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AvailabilityIds(availabilityIds string) ApiRestPimVariationsGetRequest {
	r.availabilityIds = &availabilityIds
	return r
}
// Filter restricts the list of results to variations which have children.
func (r ApiRestPimVariationsGetRequest) HasChildren(hasChildren bool) ApiRestPimVariationsGetRequest {
	r.hasChildren = &hasChildren
	return r
}
// Filter restricts the list of results to variations which have active children.
func (r ApiRestPimVariationsGetRequest) HasActiveChildren(hasActiveChildren bool) ApiRestPimVariationsGetRequest {
	r.hasActiveChildren = &hasActiveChildren
	return r
}
//  Filter restricts the list of results to variations which have the specified attribute ID.
func (r ApiRestPimVariationsGetRequest) AttributeId(attributeId int32) ApiRestPimVariationsGetRequest {
	r.attributeId = &attributeId
	return r
}
// Filter restricts the list of results to variations which have any of the specified attribute IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AnyAttributeId(anyAttributeId string) ApiRestPimVariationsGetRequest {
	r.anyAttributeId = &anyAttributeId
	return r
}
// Filter restricts the list of results to variations which have all specified attribute IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AllAttributeIds(allAttributeIds string) ApiRestPimVariationsGetRequest {
	r.allAttributeIds = &allAttributeIds
	return r
}
//  Filter restricts the list of results to variations which have the specified attribute value ID.
func (r ApiRestPimVariationsGetRequest) AttributeValueId(attributeValueId int32) ApiRestPimVariationsGetRequest {
	r.attributeValueId = &attributeValueId
	return r
}
//  Filter restricts the list of results to variations which have the any of the specified attribute value IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AnyAttributeValueId(anyAttributeValueId string) ApiRestPimVariationsGetRequest {
	r.anyAttributeValueId = &anyAttributeValueId
	return r
}
// Filter restricts the list of results to variations which have all specified attribute value IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AllAttributeValueIds(allAttributeValueIds string) ApiRestPimVariationsGetRequest {
	r.allAttributeValueIds = &allAttributeValueIds
	return r
}
// Filter restricts the list of results to variations which have a barcode with the specified code.
func (r ApiRestPimVariationsGetRequest) BarcodeCode(barcodeCode string) ApiRestPimVariationsGetRequest {
	r.barcodeCode = &barcodeCode
	return r
}
// Filter restricts the list of results to variations which have a barcode with the specified ID.
func (r ApiRestPimVariationsGetRequest) BarcodeId(barcodeId int32) ApiRestPimVariationsGetRequest {
	r.barcodeId = &barcodeId
	return r
}
// Filter restricts the list of results to variations with the specified bundle type.
func (r ApiRestPimVariationsGetRequest) BundleType(bundleType string) ApiRestPimVariationsGetRequest {
	r.bundleType = &bundleType
	return r
}
// Filter restricts the list of results to variations which have the specified category ID.
func (r ApiRestPimVariationsGetRequest) CategoryId(categoryId int32) ApiRestPimVariationsGetRequest {
	r.categoryId = &categoryId
	return r
}
// Filter restricts the list of results to variations which have any of the specified category IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AnyCategoryId(anyCategoryId string) ApiRestPimVariationsGetRequest {
	r.anyCategoryId = &anyCategoryId
	return r
}
// Filter restricts the list of results to variations which have all specified category IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AllCategoryIds(allCategoryIds string) ApiRestPimVariationsGetRequest {
	r.allCategoryIds = &allCategoryIds
	return r
}
// Filter restricts the list of results to variations which have any of the specified characteristic IDs.
func (r ApiRestPimVariationsGetRequest) AnyCharacteristicId(anyCharacteristicId string) ApiRestPimVariationsGetRequest {
	r.anyCharacteristicId = &anyCharacteristicId
	return r
}
// Filter restricts the list of results to variations which have all specified characteristic IDs.
func (r ApiRestPimVariationsGetRequest) AllCharacteristicIds(allCharacteristicIds string) ApiRestPimVariationsGetRequest {
	r.allCharacteristicIds = &allCharacteristicIds
	return r
}
// Filter restricts the list of results to variations which have the specified client ID.
func (r ApiRestPimVariationsGetRequest) ClientId(clientId int32) ApiRestPimVariationsGetRequest {
	r.clientId = &clientId
	return r
}
// Filter restricts the list of results to variations which have any of the specified client IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AnyClientId(anyClientId string) ApiRestPimVariationsGetRequest {
	r.anyClientId = &anyClientId
	return r
}
// Filter restricts the list of results to variations which have all specified client IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AllClientIds(allClientIds string) ApiRestPimVariationsGetRequest {
	r.allClientIds = &allClientIds
	return r
}
// Filter restricts the list of results to variations which have any of the specified automatic client visibilities. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AutomaticClientVisibilities(automaticClientVisibilities string) ApiRestPimVariationsGetRequest {
	r.automaticClientVisibilities = &automaticClientVisibilities
	return r
}
//  Filter restricts the list of results to variations which have an image available for the specified market ID.
func (r ApiRestPimVariationsGetRequest) ImageHasMarketId(imageHasMarketId float32) ApiRestPimVariationsGetRequest {
	r.imageHasMarketId = &imageHasMarketId
	return r
}
// Filter restricts the list of results to variations with the specified flag one.
func (r ApiRestPimVariationsGetRequest) Flag1(flag1 int32) ApiRestPimVariationsGetRequest {
	r.flag1 = &flag1
	return r
}
// Filter restricts the list of results to variations with the specified flag two.
func (r ApiRestPimVariationsGetRequest) Flag2(flag2 int32) ApiRestPimVariationsGetRequest {
	r.flag2 = &flag2
	return r
}
// Filter restricts the list of results to variations with the specified manufacturer ID.
func (r ApiRestPimVariationsGetRequest) ManufacturerId(manufacturerId int32) ApiRestPimVariationsGetRequest {
	r.manufacturerId = &manufacturerId
	return r
}
// Filter restricts the list of results to variations with any of the specified manufacturer IDs.
func (r ApiRestPimVariationsGetRequest) AnyManufacturerId(anyManufacturerId string) ApiRestPimVariationsGetRequest {
	r.anyManufacturerId = &anyManufacturerId
	return r
}
// Filter restricts the list of results to variations which have the specified item type.
func (r ApiRestPimVariationsGetRequest) ItemType(itemType string) ApiRestPimVariationsGetRequest {
	r.itemType = &itemType
	return r
}
// Filter restricts the list of results to variations which have the specified market ID.
func (r ApiRestPimVariationsGetRequest) MarketId(marketId float32) ApiRestPimVariationsGetRequest {
	r.marketId = &marketId
	return r
}
// Filter restricts the list of results to variations which have any of the specified market IDs.
func (r ApiRestPimVariationsGetRequest) AnyMarketId(anyMarketId string) ApiRestPimVariationsGetRequest {
	r.anyMarketId = &anyMarketId
	return r
}
// Filter restricts the list of results to variations which have all specified market IDs.
func (r ApiRestPimVariationsGetRequest) AllMarketIds(allMarketIds string) ApiRestPimVariationsGetRequest {
	r.allMarketIds = &allMarketIds
	return r
}
// Filter restricts the list of results to variations which have a sales price between the specified minimum and maximum value. Minimum and maximum value should be separated by a comma.
func (r ApiRestPimVariationsGetRequest) PriceBetween(priceBetween string) ApiRestPimVariationsGetRequest {
	r.priceBetween = &priceBetween
	return r
}
// Filter restricts the list of results to variations where the specified sales price is between the specified minimum and maximum value. Sales price ID, Minimum and maximum value should be separated by a comma.
func (r ApiRestPimVariationsGetRequest) PriceBetweenById(priceBetweenById string) ApiRestPimVariationsGetRequest {
	r.priceBetweenById = &priceBetweenById
	return r
}
// Filter restricts the list of results to variations which have any of the specified sales price IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsGetRequest) AnySalesPriceId(anySalesPriceId string) ApiRestPimVariationsGetRequest {
	r.anySalesPriceId = &anySalesPriceId
	return r
}
// Filter restricts the list of results to variations which have the specified property selection ID.
func (r ApiRestPimVariationsGetRequest) PropertySelectionId(propertySelectionId int32) ApiRestPimVariationsGetRequest {
	r.propertySelectionId = &propertySelectionId
	return r
}
// Filter restricts the list of results to variations which have any of the specified property selection IDs.
func (r ApiRestPimVariationsGetRequest) AnyPropertySelectionId(anyPropertySelectionId string) ApiRestPimVariationsGetRequest {
	r.anyPropertySelectionId = &anyPropertySelectionId
	return r
}
// Filter restricts the list of results to variations which have all specified property selection IDs.
func (r ApiRestPimVariationsGetRequest) AllPropertySelectionIds(allPropertySelectionIds string) ApiRestPimVariationsGetRequest {
	r.allPropertySelectionIds = &allPropertySelectionIds
	return r
}
// Filter restricts the list of results to variations which have a name in the specified language.
func (r ApiRestPimVariationsGetRequest) HasNameInLanguage(hasNameInLanguage string) ApiRestPimVariationsGetRequest {
	r.hasNameInLanguage = &hasNameInLanguage
	return r
}
// Filter restricts the list of results to variations which have been created in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsGetRequest) CreatedAt(createdAt string) ApiRestPimVariationsGetRequest {
	r.createdAt = &createdAt
	return r
}
// Filter restricts the list of results to variations which have been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsGetRequest) UpdatedAt(updatedAt string) ApiRestPimVariationsGetRequest {
	r.updatedAt = &updatedAt
	return r
}
// Filter restricts the list of results to variations whose item has been created in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsGetRequest) ItemCreatedAt(itemCreatedAt string) ApiRestPimVariationsGetRequest {
	r.itemCreatedAt = &itemCreatedAt
	return r
}
// Filter restricts the list of results to variations whose item has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsGetRequest) ItemUpdatedAt(itemUpdatedAt string) ApiRestPimVariationsGetRequest {
	r.itemUpdatedAt = &itemUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose availablity has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsGetRequest) AvailabilityUpdatedAt(availabilityUpdatedAt string) ApiRestPimVariationsGetRequest {
	r.availabilityUpdatedAt = &availabilityUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose stock has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsGetRequest) StockUpdatedAt(stockUpdatedAt string) ApiRestPimVariationsGetRequest {
	r.stockUpdatedAt = &stockUpdatedAt
	return r
}
// The requested page of results. Default value is 1.
func (r ApiRestPimVariationsGetRequest) Page(page int32) ApiRestPimVariationsGetRequest {
	r.page = &page
	return r
}
// The number of results per page. Maximum value is 250. Default value is 50.
func (r ApiRestPimVariationsGetRequest) ItemsPerPage(itemsPerPage int32) ApiRestPimVariationsGetRequest {
	r.itemsPerPage = &itemsPerPage
	return r
}

func (r ApiRestPimVariationsGetRequest) Execute() (InlineResponse200, *_nethttp.Response, error) {
	return r.ApiService.RestPimVariationsGetExecute(r)
}

/*
RestPimVariationsGet Lists variations

Lists variations with the specified data.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestPimVariationsGetRequest
*/
func (a *DefaultApiService) RestPimVariationsGet(ctx _context.Context) ApiRestPimVariationsGetRequest {
	return ApiRestPimVariationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InlineResponse200
func (a *DefaultApiService) RestPimVariationsGetExecute(r ApiRestPimVariationsGetRequest) (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestPimVariationsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/pim/variations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.with != nil {
		t := *r.with
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("with", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("with", parameterToString(t, "multi"))
		}
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.groupBy != nil {
		localVarQueryParams.Add("groupBy", parameterToString(*r.groupBy, ""))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("itemId", parameterToString(*r.itemId, ""))
	}
	if r.itemIds != nil {
		localVarQueryParams.Add("itemIds", parameterToString(*r.itemIds, ""))
	}
	if r.isActive != nil {
		localVarQueryParams.Add("isActive", parameterToString(*r.isActive, ""))
	}
	if r.isMain != nil {
		localVarQueryParams.Add("isMain", parameterToString(*r.isMain, ""))
	}
	if r.isSalable != nil {
		localVarQueryParams.Add("isSalable", parameterToString(*r.isSalable, ""))
	}
	if r.supplierId != nil {
		localVarQueryParams.Add("supplierId", parameterToString(*r.supplierId, ""))
	}
	if r.availabilityIds != nil {
		localVarQueryParams.Add("availabilityIds", parameterToString(*r.availabilityIds, ""))
	}
	if r.hasChildren != nil {
		localVarQueryParams.Add("hasChildren", parameterToString(*r.hasChildren, ""))
	}
	if r.hasActiveChildren != nil {
		localVarQueryParams.Add("hasActiveChildren", parameterToString(*r.hasActiveChildren, ""))
	}
	if r.attributeId != nil {
		localVarQueryParams.Add("attributeId", parameterToString(*r.attributeId, ""))
	}
	if r.anyAttributeId != nil {
		localVarQueryParams.Add("anyAttributeId", parameterToString(*r.anyAttributeId, ""))
	}
	if r.allAttributeIds != nil {
		localVarQueryParams.Add("allAttributeIds", parameterToString(*r.allAttributeIds, ""))
	}
	if r.attributeValueId != nil {
		localVarQueryParams.Add("attributeValueId", parameterToString(*r.attributeValueId, ""))
	}
	if r.anyAttributeValueId != nil {
		localVarQueryParams.Add("anyAttributeValueId", parameterToString(*r.anyAttributeValueId, ""))
	}
	if r.allAttributeValueIds != nil {
		localVarQueryParams.Add("allAttributeValueIds", parameterToString(*r.allAttributeValueIds, ""))
	}
	if r.barcodeCode != nil {
		localVarQueryParams.Add("barcodeCode", parameterToString(*r.barcodeCode, ""))
	}
	if r.barcodeId != nil {
		localVarQueryParams.Add("barcodeId", parameterToString(*r.barcodeId, ""))
	}
	if r.bundleType != nil {
		localVarQueryParams.Add("bundleType", parameterToString(*r.bundleType, ""))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, ""))
	}
	if r.anyCategoryId != nil {
		localVarQueryParams.Add("anyCategoryId", parameterToString(*r.anyCategoryId, ""))
	}
	if r.allCategoryIds != nil {
		localVarQueryParams.Add("allCategoryIds", parameterToString(*r.allCategoryIds, ""))
	}
	if r.anyCharacteristicId != nil {
		localVarQueryParams.Add("anyCharacteristicId", parameterToString(*r.anyCharacteristicId, ""))
	}
	if r.allCharacteristicIds != nil {
		localVarQueryParams.Add("allCharacteristicIds", parameterToString(*r.allCharacteristicIds, ""))
	}
	if r.clientId != nil {
		localVarQueryParams.Add("clientId", parameterToString(*r.clientId, ""))
	}
	if r.anyClientId != nil {
		localVarQueryParams.Add("anyClientId", parameterToString(*r.anyClientId, ""))
	}
	if r.allClientIds != nil {
		localVarQueryParams.Add("allClientIds", parameterToString(*r.allClientIds, ""))
	}
	if r.automaticClientVisibilities != nil {
		localVarQueryParams.Add("automaticClientVisibilities", parameterToString(*r.automaticClientVisibilities, ""))
	}
	if r.imageHasMarketId != nil {
		localVarQueryParams.Add("imageHasMarketId", parameterToString(*r.imageHasMarketId, ""))
	}
	if r.flag1 != nil {
		localVarQueryParams.Add("flag1", parameterToString(*r.flag1, ""))
	}
	if r.flag2 != nil {
		localVarQueryParams.Add("flag2", parameterToString(*r.flag2, ""))
	}
	if r.manufacturerId != nil {
		localVarQueryParams.Add("manufacturerId", parameterToString(*r.manufacturerId, ""))
	}
	if r.anyManufacturerId != nil {
		localVarQueryParams.Add("anyManufacturerId", parameterToString(*r.anyManufacturerId, ""))
	}
	if r.itemType != nil {
		localVarQueryParams.Add("itemType", parameterToString(*r.itemType, ""))
	}
	if r.marketId != nil {
		localVarQueryParams.Add("marketId", parameterToString(*r.marketId, ""))
	}
	if r.anyMarketId != nil {
		localVarQueryParams.Add("anyMarketId", parameterToString(*r.anyMarketId, ""))
	}
	if r.allMarketIds != nil {
		localVarQueryParams.Add("allMarketIds", parameterToString(*r.allMarketIds, ""))
	}
	if r.priceBetween != nil {
		localVarQueryParams.Add("priceBetween", parameterToString(*r.priceBetween, ""))
	}
	if r.priceBetweenById != nil {
		localVarQueryParams.Add("priceBetweenById", parameterToString(*r.priceBetweenById, ""))
	}
	if r.anySalesPriceId != nil {
		localVarQueryParams.Add("anySalesPriceId", parameterToString(*r.anySalesPriceId, ""))
	}
	if r.propertySelectionId != nil {
		localVarQueryParams.Add("propertySelectionId", parameterToString(*r.propertySelectionId, ""))
	}
	if r.anyPropertySelectionId != nil {
		localVarQueryParams.Add("anyPropertySelectionId", parameterToString(*r.anyPropertySelectionId, ""))
	}
	if r.allPropertySelectionIds != nil {
		localVarQueryParams.Add("allPropertySelectionIds", parameterToString(*r.allPropertySelectionIds, ""))
	}
	if r.hasNameInLanguage != nil {
		localVarQueryParams.Add("hasNameInLanguage", parameterToString(*r.hasNameInLanguage, ""))
	}
	if r.createdAt != nil {
		localVarQueryParams.Add("createdAt", parameterToString(*r.createdAt, ""))
	}
	if r.updatedAt != nil {
		localVarQueryParams.Add("updatedAt", parameterToString(*r.updatedAt, ""))
	}
	if r.itemCreatedAt != nil {
		localVarQueryParams.Add("itemCreatedAt", parameterToString(*r.itemCreatedAt, ""))
	}
	if r.itemUpdatedAt != nil {
		localVarQueryParams.Add("itemUpdatedAt", parameterToString(*r.itemUpdatedAt, ""))
	}
	if r.availabilityUpdatedAt != nil {
		localVarQueryParams.Add("availabilityUpdatedAt", parameterToString(*r.availabilityUpdatedAt, ""))
	}
	if r.stockUpdatedAt != nil {
		localVarQueryParams.Add("stockUpdatedAt", parameterToString(*r.stockUpdatedAt, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.itemsPerPage != nil {
		localVarQueryParams.Add("itemsPerPage", parameterToString(*r.itemsPerPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestPimVariationsPutRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	pimVariation *[]PimVariation
}

func (r ApiRestPimVariationsPutRequest) PimVariation(pimVariation []PimVariation) ApiRestPimVariationsPutRequest {
	r.pimVariation = &pimVariation
	return r
}

func (r ApiRestPimVariationsPutRequest) Execute() ([]PimVariation, *_nethttp.Response, error) {
	return r.ApiService.RestPimVariationsPutExecute(r)
}

/*
RestPimVariationsPut Create a list of variations and their related data

 Creates a list of variations and their related data.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestPimVariationsPutRequest
*/
func (a *DefaultApiService) RestPimVariationsPut(ctx _context.Context) ApiRestPimVariationsPutRequest {
	return ApiRestPimVariationsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PimVariation
func (a *DefaultApiService) RestPimVariationsPutExecute(r ApiRestPimVariationsPutRequest) ([]PimVariation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []PimVariation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestPimVariationsPut")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/pim/variations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.pimVariation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestPimVariationsScrollGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	with *[]string
	groupBy *string
	ids *string
	itemId *int32
	itemIds *string
	isActive *bool
	isMain *bool
	isSalable *bool
	supplierId *int32
	availabilityIds *string
	hasChildren *bool
	hasActiveChildren *bool
	attributeId *int32
	anyAttributeId *string
	allAttributeIds *string
	attributeValueId *int32
	anyAttributeValueId *string
	allAttributeValueIds *string
	barcodeCode *string
	barcodeId *int32
	bundleType *string
	categoryId *int32
	anyCategoryId *string
	allCategoryIds *string
	anyCharacteristicId *string
	allCharacteristicIds *string
	clientId *int32
	anyClientId *string
	allClientIds *string
	automaticClientVisibilities *string
	imageHasMarketId *float32
	flag1 *int32
	flag2 *int32
	manufacturerId *int32
	anyManufacturerId *string
	itemType *string
	marketId *float32
	anyMarketId *string
	allMarketIds *string
	priceBetween *string
	priceBetweenById *string
	anySalesPriceId *string
	referrerIds *string
	priceCalculationUuid *string
	propertySelectionId *int32
	anyPropertySelectionId *string
	allPropertySelectionIds *string
	hasNameInLanguage *string
	createdAt *string
	updatedAt *string
	itemCreatedAt *string
	itemUpdatedAt *string
	availabilityUpdatedAt *string
	stockUpdatedAt *string
	barcodeUpdatedAt *string
	categoryUpdatedAt *string
	clientUpdatedAt *string
	marketUpdatedAt *string
	propertyUpdatedAt *string
	supplierUpdatedAt *string
	tagUpdatedAt *string
	warehouseUpdatedAt *string
	hasLowestPrice *bool
	cursor *string
}

// Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:&lt;ul&gt;&lt;li&gt;&#39;additionalSkus&#39; &#x3D; The additional skus of the variation.&lt;/li&gt;&lt;li&gt;&#39;attributeValues&#39; &#x3D; The attribute values of the variation.&lt;/li&gt;&lt;li&gt;&#39;attributeValues.attribute&#39;/b&gt; &#x3D; Includes attributeValues. The attribute data to the related attribute ID.&lt;/li&gt;&lt;li&gt;&#39;attributeValues.attributeValue&#39; &#x3D; Includes attributeValues. The attribute value data to the related attribute value ID.&lt;/li&gt;&lt;li&gt;&#39;barcodes&#39; &#x3D; The barcodes of the variation.&lt;/li&gt;&lt;li&gt;&#39;barcodes.barcode&#39; &#x3D; Includes barcodes. The barcode data to the related barcode ID.&lt;/li&gt;&lt;li&gt;&#39;base&#39; &#x3D; The variation base.&lt;/li&gt;&lt;li&gt;&#39;base.item&#39; &#x3D; Includes base. The item data of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.itemSerialNumber&#39; &#x3D; Includes base. The item serial numbers of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.feedback&#39; &#x3D; Includes base. The feedback of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.characteristics&#39; &#x3D; Includes base. The characteristics of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.crossSelling&#39; &#x3D; Includes base. The cross selling items of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.texts&#39; &#x3D; Includes base. The texts of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.availability&#39; &#x3D; Includes base. The availability data related to the variation&#39;s availability ID.&lt;/li&gt;&lt;li&gt;&#39;base.images&#39; &#x3D; Includes base. The images linked to the item.&lt;/li&gt;&lt;li&gt;&#39;base.shippingProfiles&#39; &#x3D; Includes base. The shipping profiles linked to the item.&lt;/li&gt;&lt;li&gt;&#39;base.stock&#39; &#x3D; Includes base. The stock of the variation.&lt;/li&gt;&lt;li&gt;&#39;base.stockStorageLocations&#39; &#x3D; Includes base. The stock storage locations of the variation.&lt;/li&gt;&lt;li&gt;&#39;bundleComponents&#39; &#x3D; The bundle components of the variation.&lt;/li&gt;&lt;li&gt;&#39;categories&#39; &#x3D; The categories of the variation.&lt;/li&gt;&lt;li&gt;&#39;categories.category&#39; &#x3D; Includes categories. The related category data for each category ID.&lt;/li&gt;&lt;li&gt;&#39;categories.categoryBranch&#39; &#x3D; Includes categories. The related category branch data for each category ID.&lt;/li&gt;&lt;li&gt;&#39;clients&#39; &#x3D; The clients of the variation.&lt;/li&gt;&lt;li&gt;&#39;defaultCategories&#39; &#x3D; The default categories of the variation&lt;/li&gt;&lt;li&gt;&#39;defaultCategories.category&#39; &#x3D; Includes defaultCategories. The category data to the related category ID.&lt;/li&gt;&lt;li&gt;&#39;images&#39; &#x3D; The images of the variation&lt;/li&gt;&lt;li&gt;&#39;images.image&#39; &#x3D; Includes images. The image data to the related image ID.&lt;/li&gt;&lt;li&gt;&#39;markets&#39; &#x3D; The markets of the variation.&lt;/li&gt;&lt;li&gt;&#39;marketIdentNumbers&#39; &#x3D; The market ident numbers of the variation&lt;/li&gt;&lt;li&gt;&#39;salesPrices&#39; &#x3D; The sales prices of the variation.&lt;/li&gt;&lt;li&gt;&#39;salesPrices.salesPrice&#39; &#x3D; Includes salesPrices. The sales price data to the related sales price ID.&lt;/li&gt;&lt;li&gt;&#39;skus&#39; &#x3D; The skus of the variation.&lt;/li&gt;&lt;li&gt;&#39;supplier&#39; &#x3D; The supplier of the variation.&lt;/li&gt;&lt;li&gt;&#39;supplier.supplier&#39; &#x3D; Includes supplier. The contact data to the related supplier ID.&lt;/li&gt;&lt;li&gt;&#39;timestamps&#39; &#x3D; The timetamps of the variation.&lt;/li&gt;&lt;li&gt;&#39;warehouses&#39; &#x3D; The warehouses of the variation&lt;/li&gt;&lt;li&gt;&#39;warehouses.warehouse&#39; &#x3D; Includes warehouses. The warehouse data to the related warehouse ID.&lt;/li&gt;&lt;li&gt;&#39;unit&#39; &#x3D; The unit of the variation&lt;/li&gt;&lt;li&gt;&#39;unit.unit&#39; &#x3D; Includes unit. The unit data of the related unit ID.&lt;/li&gt;&lt;li&gt;&#39;tags&#39; &#x3D; The tags of the variation.&lt;/li&gt;&lt;li&gt;&#39;tags.tag&#39; &#x3D; Includes tags. The tag data to the related tag ID.&lt;/li&gt;&lt;li&gt;&#39;properties&#39; &#x3D; The properties of the variation.&lt;/li&gt;&lt;li&gt;&#39;properties.property&#39; &#x3D; Includes properties. The property data to the related property ID.&lt;/li&gt;&lt;/ul&gt;
func (r ApiRestPimVariationsScrollGetRequest) With(with []string) ApiRestPimVariationsScrollGetRequest {
	r.with = &with
	return r
}
// Groups the result. The following parameters are available:&lt;ul&gt;&lt;li&gt;&#39;itemId&#39; &#x3D; Groups the result by the item ID.&lt;/li&gt;&lt;li&gt;&#39;itemAttributeValue&#39; &#x3D; Groups the result by the attribute with the flag &#39;isGroupable&#39;.&lt;/li&gt;&lt;/ul&gt;
func (r ApiRestPimVariationsScrollGetRequest) GroupBy(groupBy string) ApiRestPimVariationsScrollGetRequest {
	r.groupBy = &groupBy
	return r
}
// Filter restricts the list of results to variations with the specified IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) Ids(ids string) ApiRestPimVariationsScrollGetRequest {
	r.ids = &ids
	return r
}
// Filter restricts the list of results to variations with the specified item ID.
func (r ApiRestPimVariationsScrollGetRequest) ItemId(itemId int32) ApiRestPimVariationsScrollGetRequest {
	r.itemId = &itemId
	return r
}
// Filter restricts the list of results to variations with the specified item IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) ItemIds(itemIds string) ApiRestPimVariationsScrollGetRequest {
	r.itemIds = &itemIds
	return r
}
// Filter restricts the list of results to variations which are active/inactive.
func (r ApiRestPimVariationsScrollGetRequest) IsActive(isActive bool) ApiRestPimVariationsScrollGetRequest {
	r.isActive = &isActive
	return r
}
// Filter restricts the list of results to variations which are main/not main.
func (r ApiRestPimVariationsScrollGetRequest) IsMain(isMain bool) ApiRestPimVariationsScrollGetRequest {
	r.isMain = &isMain
	return r
}
// Filter restricts the list of results to variations which are salable.
func (r ApiRestPimVariationsScrollGetRequest) IsSalable(isSalable bool) ApiRestPimVariationsScrollGetRequest {
	r.isSalable = &isSalable
	return r
}
// Filter restricts the list of results to variations which have the given supplier ID.
func (r ApiRestPimVariationsScrollGetRequest) SupplierId(supplierId int32) ApiRestPimVariationsScrollGetRequest {
	r.supplierId = &supplierId
	return r
}
// Filter restricts the list of results to variations with the specified availability IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AvailabilityIds(availabilityIds string) ApiRestPimVariationsScrollGetRequest {
	r.availabilityIds = &availabilityIds
	return r
}
// Filter restricts the list of results to variations which have children.
func (r ApiRestPimVariationsScrollGetRequest) HasChildren(hasChildren bool) ApiRestPimVariationsScrollGetRequest {
	r.hasChildren = &hasChildren
	return r
}
// Filter restricts the list of results to variations which have active children.
func (r ApiRestPimVariationsScrollGetRequest) HasActiveChildren(hasActiveChildren bool) ApiRestPimVariationsScrollGetRequest {
	r.hasActiveChildren = &hasActiveChildren
	return r
}
//  Filter restricts the list of results to variations which have the specified attribute ID.
func (r ApiRestPimVariationsScrollGetRequest) AttributeId(attributeId int32) ApiRestPimVariationsScrollGetRequest {
	r.attributeId = &attributeId
	return r
}
// Filter restricts the list of results to variations which have any of the specified attribute IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AnyAttributeId(anyAttributeId string) ApiRestPimVariationsScrollGetRequest {
	r.anyAttributeId = &anyAttributeId
	return r
}
// Filter restricts the list of results to variations which have all specified attribute IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AllAttributeIds(allAttributeIds string) ApiRestPimVariationsScrollGetRequest {
	r.allAttributeIds = &allAttributeIds
	return r
}
//  Filter restricts the list of results to variations which have the specified attribute value ID.
func (r ApiRestPimVariationsScrollGetRequest) AttributeValueId(attributeValueId int32) ApiRestPimVariationsScrollGetRequest {
	r.attributeValueId = &attributeValueId
	return r
}
//  Filter restricts the list of results to variations which have the any of the specified attribute value IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AnyAttributeValueId(anyAttributeValueId string) ApiRestPimVariationsScrollGetRequest {
	r.anyAttributeValueId = &anyAttributeValueId
	return r
}
// Filter restricts the list of results to variations which have all specified attribute value IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AllAttributeValueIds(allAttributeValueIds string) ApiRestPimVariationsScrollGetRequest {
	r.allAttributeValueIds = &allAttributeValueIds
	return r
}
// Filter restricts the list of results to variations which have a barcode with the specified code.
func (r ApiRestPimVariationsScrollGetRequest) BarcodeCode(barcodeCode string) ApiRestPimVariationsScrollGetRequest {
	r.barcodeCode = &barcodeCode
	return r
}
// Filter restricts the list of results to variations which have a barcode with the specified ID.
func (r ApiRestPimVariationsScrollGetRequest) BarcodeId(barcodeId int32) ApiRestPimVariationsScrollGetRequest {
	r.barcodeId = &barcodeId
	return r
}
// Filter restricts the list of results to variations with the specified bundle type.
func (r ApiRestPimVariationsScrollGetRequest) BundleType(bundleType string) ApiRestPimVariationsScrollGetRequest {
	r.bundleType = &bundleType
	return r
}
// Filter restricts the list of results to variations which have the specified category ID.
func (r ApiRestPimVariationsScrollGetRequest) CategoryId(categoryId int32) ApiRestPimVariationsScrollGetRequest {
	r.categoryId = &categoryId
	return r
}
// Filter restricts the list of results to variations which have any of the specified category IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AnyCategoryId(anyCategoryId string) ApiRestPimVariationsScrollGetRequest {
	r.anyCategoryId = &anyCategoryId
	return r
}
// Filter restricts the list of results to variations which have all specified category IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AllCategoryIds(allCategoryIds string) ApiRestPimVariationsScrollGetRequest {
	r.allCategoryIds = &allCategoryIds
	return r
}
// Filter restricts the list of results to variations which have any of the specified characteristic IDs.
func (r ApiRestPimVariationsScrollGetRequest) AnyCharacteristicId(anyCharacteristicId string) ApiRestPimVariationsScrollGetRequest {
	r.anyCharacteristicId = &anyCharacteristicId
	return r
}
// Filter restricts the list of results to variations which have all specified characteristic IDs.
func (r ApiRestPimVariationsScrollGetRequest) AllCharacteristicIds(allCharacteristicIds string) ApiRestPimVariationsScrollGetRequest {
	r.allCharacteristicIds = &allCharacteristicIds
	return r
}
// Filter restricts the list of results to variations which have the specified client ID.
func (r ApiRestPimVariationsScrollGetRequest) ClientId(clientId int32) ApiRestPimVariationsScrollGetRequest {
	r.clientId = &clientId
	return r
}
// Filter restricts the list of results to variations which have any of the specified client IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AnyClientId(anyClientId string) ApiRestPimVariationsScrollGetRequest {
	r.anyClientId = &anyClientId
	return r
}
// Filter restricts the list of results to variations which have all specified client IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AllClientIds(allClientIds string) ApiRestPimVariationsScrollGetRequest {
	r.allClientIds = &allClientIds
	return r
}
// Filter restricts the list of results to variations which have any of the specified automatic client visibilities. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AutomaticClientVisibilities(automaticClientVisibilities string) ApiRestPimVariationsScrollGetRequest {
	r.automaticClientVisibilities = &automaticClientVisibilities
	return r
}
//  Filter restricts the list of results to variations which have an image available for the specified market ID.
func (r ApiRestPimVariationsScrollGetRequest) ImageHasMarketId(imageHasMarketId float32) ApiRestPimVariationsScrollGetRequest {
	r.imageHasMarketId = &imageHasMarketId
	return r
}
// Filter restricts the list of results to variations with the specified flag one.
func (r ApiRestPimVariationsScrollGetRequest) Flag1(flag1 int32) ApiRestPimVariationsScrollGetRequest {
	r.flag1 = &flag1
	return r
}
// Filter restricts the list of results to variations with the specified flag two.
func (r ApiRestPimVariationsScrollGetRequest) Flag2(flag2 int32) ApiRestPimVariationsScrollGetRequest {
	r.flag2 = &flag2
	return r
}
// Filter restricts the list of results to variations with the specified manufacturer ID.
func (r ApiRestPimVariationsScrollGetRequest) ManufacturerId(manufacturerId int32) ApiRestPimVariationsScrollGetRequest {
	r.manufacturerId = &manufacturerId
	return r
}
// Filter restricts the list of results to variations with any of the specified manufacturer IDs.
func (r ApiRestPimVariationsScrollGetRequest) AnyManufacturerId(anyManufacturerId string) ApiRestPimVariationsScrollGetRequest {
	r.anyManufacturerId = &anyManufacturerId
	return r
}
// Filter restricts the list of results to variations which have the specified item type.
func (r ApiRestPimVariationsScrollGetRequest) ItemType(itemType string) ApiRestPimVariationsScrollGetRequest {
	r.itemType = &itemType
	return r
}
// Filter restricts the list of results to variations which have the specified market ID.
func (r ApiRestPimVariationsScrollGetRequest) MarketId(marketId float32) ApiRestPimVariationsScrollGetRequest {
	r.marketId = &marketId
	return r
}
// Filter restricts the list of results to variations which have any of the specified market IDs.
func (r ApiRestPimVariationsScrollGetRequest) AnyMarketId(anyMarketId string) ApiRestPimVariationsScrollGetRequest {
	r.anyMarketId = &anyMarketId
	return r
}
// Filter restricts the list of results to variations which have all specified market IDs.
func (r ApiRestPimVariationsScrollGetRequest) AllMarketIds(allMarketIds string) ApiRestPimVariationsScrollGetRequest {
	r.allMarketIds = &allMarketIds
	return r
}
// Filter restricts the list of results to variations which have a sales price between the specified minimum and maximum value. Minimum and maximum value should be separated by a comma.
func (r ApiRestPimVariationsScrollGetRequest) PriceBetween(priceBetween string) ApiRestPimVariationsScrollGetRequest {
	r.priceBetween = &priceBetween
	return r
}
// Filter restricts the list of results to variations where the specified sales price is between the specified minimum and maximum value. Sales price ID, Minimum and maximum value should be separated by a comma.
func (r ApiRestPimVariationsScrollGetRequest) PriceBetweenById(priceBetweenById string) ApiRestPimVariationsScrollGetRequest {
	r.priceBetweenById = &priceBetweenById
	return r
}
// Filter restricts the list of results to variations which have any of the specified sales price IDs. More than one parameter should be separated by commas.
func (r ApiRestPimVariationsScrollGetRequest) AnySalesPriceId(anySalesPriceId string) ApiRestPimVariationsScrollGetRequest {
	r.anySalesPriceId = &anySalesPriceId
	return r
}
// Filter restricts the list of results to variations which have/not have any of the specified market IDs.
func (r ApiRestPimVariationsScrollGetRequest) ReferrerIds(referrerIds string) ApiRestPimVariationsScrollGetRequest {
	r.referrerIds = &referrerIds
	return r
}
// Filter restricts the list of results to variations with the specified price calculiation uuid.
func (r ApiRestPimVariationsScrollGetRequest) PriceCalculationUuid(priceCalculationUuid string) ApiRestPimVariationsScrollGetRequest {
	r.priceCalculationUuid = &priceCalculationUuid
	return r
}
// Filter restricts the list of results to variations which have the specified property selection ID.
func (r ApiRestPimVariationsScrollGetRequest) PropertySelectionId(propertySelectionId int32) ApiRestPimVariationsScrollGetRequest {
	r.propertySelectionId = &propertySelectionId
	return r
}
// Filter restricts the list of results to variations which have any of the specified property selection IDs.
func (r ApiRestPimVariationsScrollGetRequest) AnyPropertySelectionId(anyPropertySelectionId string) ApiRestPimVariationsScrollGetRequest {
	r.anyPropertySelectionId = &anyPropertySelectionId
	return r
}
// Filter restricts the list of results to variations which have all specified property selection IDs.
func (r ApiRestPimVariationsScrollGetRequest) AllPropertySelectionIds(allPropertySelectionIds string) ApiRestPimVariationsScrollGetRequest {
	r.allPropertySelectionIds = &allPropertySelectionIds
	return r
}
// Filter restricts the list of results to variations which have a name in the specified language.
func (r ApiRestPimVariationsScrollGetRequest) HasNameInLanguage(hasNameInLanguage string) ApiRestPimVariationsScrollGetRequest {
	r.hasNameInLanguage = &hasNameInLanguage
	return r
}
// Filter restricts the list of results to variations which have been created in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) CreatedAt(createdAt string) ApiRestPimVariationsScrollGetRequest {
	r.createdAt = &createdAt
	return r
}
// Filter restricts the list of results to variations which have been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) UpdatedAt(updatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.updatedAt = &updatedAt
	return r
}
// Filter restricts the list of results to variations whose item has been created in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) ItemCreatedAt(itemCreatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.itemCreatedAt = &itemCreatedAt
	return r
}
// Filter restricts the list of results to variations whose item has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) ItemUpdatedAt(itemUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.itemUpdatedAt = &itemUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose availablity has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) AvailabilityUpdatedAt(availabilityUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.availabilityUpdatedAt = &availabilityUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose stock has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) StockUpdatedAt(stockUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.stockUpdatedAt = &stockUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose barcodes has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) BarcodeUpdatedAt(barcodeUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.barcodeUpdatedAt = &barcodeUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose categories has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) CategoryUpdatedAt(categoryUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.categoryUpdatedAt = &categoryUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose clients has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) ClientUpdatedAt(clientUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.clientUpdatedAt = &clientUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose markets has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) MarketUpdatedAt(marketUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.marketUpdatedAt = &marketUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose properties has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) PropertyUpdatedAt(propertyUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.propertyUpdatedAt = &propertyUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose suppliers has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) SupplierUpdatedAt(supplierUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.supplierUpdatedAt = &supplierUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose tags has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) TagUpdatedAt(tagUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.tagUpdatedAt = &tagUpdatedAt
	return r
}
// Filter restricts the list of results to variations whose warehouse has been updated in the specified time frame. The from and to parameter should be separated by a comma. If there is no to value, the current time is used instead.
func (r ApiRestPimVariationsScrollGetRequest) WarehouseUpdatedAt(warehouseUpdatedAt string) ApiRestPimVariationsScrollGetRequest {
	r.warehouseUpdatedAt = &warehouseUpdatedAt
	return r
}
// Filter restricts the list of results to variations which has or has not lowest price.
func (r ApiRestPimVariationsScrollGetRequest) HasLowestPrice(hasLowestPrice bool) ApiRestPimVariationsScrollGetRequest {
	r.hasLowestPrice = &hasLowestPrice
	return r
}
// The cursor to get the next entries
func (r ApiRestPimVariationsScrollGetRequest) Cursor(cursor string) ApiRestPimVariationsScrollGetRequest {
	r.cursor = &cursor
	return r
}

func (r ApiRestPimVariationsScrollGetRequest) Execute() (InlineResponse2001, *_nethttp.Response, error) {
	return r.ApiService.RestPimVariationsScrollGetExecute(r)
}

/*
RestPimVariationsScrollGet Scrolls through variations

Scrolls through variations with the specified data.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRestPimVariationsScrollGetRequest
*/
func (a *DefaultApiService) RestPimVariationsScrollGet(ctx _context.Context) ApiRestPimVariationsScrollGetRequest {
	return ApiRestPimVariationsScrollGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InlineResponse2001
func (a *DefaultApiService) RestPimVariationsScrollGetExecute(r ApiRestPimVariationsScrollGetRequest) (InlineResponse2001, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2001
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestPimVariationsScrollGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/pim/variations/scroll"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.with != nil {
		t := *r.with
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("with", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("with", parameterToString(t, "multi"))
		}
	}
	if r.groupBy != nil {
		localVarQueryParams.Add("groupBy", parameterToString(*r.groupBy, ""))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, ""))
	}
	if r.itemId != nil {
		localVarQueryParams.Add("itemId", parameterToString(*r.itemId, ""))
	}
	if r.itemIds != nil {
		localVarQueryParams.Add("itemIds", parameterToString(*r.itemIds, ""))
	}
	if r.isActive != nil {
		localVarQueryParams.Add("isActive", parameterToString(*r.isActive, ""))
	}
	if r.isMain != nil {
		localVarQueryParams.Add("isMain", parameterToString(*r.isMain, ""))
	}
	if r.isSalable != nil {
		localVarQueryParams.Add("isSalable", parameterToString(*r.isSalable, ""))
	}
	if r.supplierId != nil {
		localVarQueryParams.Add("supplierId", parameterToString(*r.supplierId, ""))
	}
	if r.availabilityIds != nil {
		localVarQueryParams.Add("availabilityIds", parameterToString(*r.availabilityIds, ""))
	}
	if r.hasChildren != nil {
		localVarQueryParams.Add("hasChildren", parameterToString(*r.hasChildren, ""))
	}
	if r.hasActiveChildren != nil {
		localVarQueryParams.Add("hasActiveChildren", parameterToString(*r.hasActiveChildren, ""))
	}
	if r.attributeId != nil {
		localVarQueryParams.Add("attributeId", parameterToString(*r.attributeId, ""))
	}
	if r.anyAttributeId != nil {
		localVarQueryParams.Add("anyAttributeId", parameterToString(*r.anyAttributeId, ""))
	}
	if r.allAttributeIds != nil {
		localVarQueryParams.Add("allAttributeIds", parameterToString(*r.allAttributeIds, ""))
	}
	if r.attributeValueId != nil {
		localVarQueryParams.Add("attributeValueId", parameterToString(*r.attributeValueId, ""))
	}
	if r.anyAttributeValueId != nil {
		localVarQueryParams.Add("anyAttributeValueId", parameterToString(*r.anyAttributeValueId, ""))
	}
	if r.allAttributeValueIds != nil {
		localVarQueryParams.Add("allAttributeValueIds", parameterToString(*r.allAttributeValueIds, ""))
	}
	if r.barcodeCode != nil {
		localVarQueryParams.Add("barcodeCode", parameterToString(*r.barcodeCode, ""))
	}
	if r.barcodeId != nil {
		localVarQueryParams.Add("barcodeId", parameterToString(*r.barcodeId, ""))
	}
	if r.bundleType != nil {
		localVarQueryParams.Add("bundleType", parameterToString(*r.bundleType, ""))
	}
	if r.categoryId != nil {
		localVarQueryParams.Add("categoryId", parameterToString(*r.categoryId, ""))
	}
	if r.anyCategoryId != nil {
		localVarQueryParams.Add("anyCategoryId", parameterToString(*r.anyCategoryId, ""))
	}
	if r.allCategoryIds != nil {
		localVarQueryParams.Add("allCategoryIds", parameterToString(*r.allCategoryIds, ""))
	}
	if r.anyCharacteristicId != nil {
		localVarQueryParams.Add("anyCharacteristicId", parameterToString(*r.anyCharacteristicId, ""))
	}
	if r.allCharacteristicIds != nil {
		localVarQueryParams.Add("allCharacteristicIds", parameterToString(*r.allCharacteristicIds, ""))
	}
	if r.clientId != nil {
		localVarQueryParams.Add("clientId", parameterToString(*r.clientId, ""))
	}
	if r.anyClientId != nil {
		localVarQueryParams.Add("anyClientId", parameterToString(*r.anyClientId, ""))
	}
	if r.allClientIds != nil {
		localVarQueryParams.Add("allClientIds", parameterToString(*r.allClientIds, ""))
	}
	if r.automaticClientVisibilities != nil {
		localVarQueryParams.Add("automaticClientVisibilities", parameterToString(*r.automaticClientVisibilities, ""))
	}
	if r.imageHasMarketId != nil {
		localVarQueryParams.Add("imageHasMarketId", parameterToString(*r.imageHasMarketId, ""))
	}
	if r.flag1 != nil {
		localVarQueryParams.Add("flag1", parameterToString(*r.flag1, ""))
	}
	if r.flag2 != nil {
		localVarQueryParams.Add("flag2", parameterToString(*r.flag2, ""))
	}
	if r.manufacturerId != nil {
		localVarQueryParams.Add("manufacturerId", parameterToString(*r.manufacturerId, ""))
	}
	if r.anyManufacturerId != nil {
		localVarQueryParams.Add("anyManufacturerId", parameterToString(*r.anyManufacturerId, ""))
	}
	if r.itemType != nil {
		localVarQueryParams.Add("itemType", parameterToString(*r.itemType, ""))
	}
	if r.marketId != nil {
		localVarQueryParams.Add("marketId", parameterToString(*r.marketId, ""))
	}
	if r.anyMarketId != nil {
		localVarQueryParams.Add("anyMarketId", parameterToString(*r.anyMarketId, ""))
	}
	if r.allMarketIds != nil {
		localVarQueryParams.Add("allMarketIds", parameterToString(*r.allMarketIds, ""))
	}
	if r.priceBetween != nil {
		localVarQueryParams.Add("priceBetween", parameterToString(*r.priceBetween, ""))
	}
	if r.priceBetweenById != nil {
		localVarQueryParams.Add("priceBetweenById", parameterToString(*r.priceBetweenById, ""))
	}
	if r.anySalesPriceId != nil {
		localVarQueryParams.Add("anySalesPriceId", parameterToString(*r.anySalesPriceId, ""))
	}
	if r.referrerIds != nil {
		localVarQueryParams.Add("referrerIds", parameterToString(*r.referrerIds, ""))
	}
	if r.priceCalculationUuid != nil {
		localVarQueryParams.Add("priceCalculationUuid", parameterToString(*r.priceCalculationUuid, ""))
	}
	if r.propertySelectionId != nil {
		localVarQueryParams.Add("propertySelectionId", parameterToString(*r.propertySelectionId, ""))
	}
	if r.anyPropertySelectionId != nil {
		localVarQueryParams.Add("anyPropertySelectionId", parameterToString(*r.anyPropertySelectionId, ""))
	}
	if r.allPropertySelectionIds != nil {
		localVarQueryParams.Add("allPropertySelectionIds", parameterToString(*r.allPropertySelectionIds, ""))
	}
	if r.hasNameInLanguage != nil {
		localVarQueryParams.Add("hasNameInLanguage", parameterToString(*r.hasNameInLanguage, ""))
	}
	if r.createdAt != nil {
		localVarQueryParams.Add("createdAt", parameterToString(*r.createdAt, ""))
	}
	if r.updatedAt != nil {
		localVarQueryParams.Add("updatedAt", parameterToString(*r.updatedAt, ""))
	}
	if r.itemCreatedAt != nil {
		localVarQueryParams.Add("itemCreatedAt", parameterToString(*r.itemCreatedAt, ""))
	}
	if r.itemUpdatedAt != nil {
		localVarQueryParams.Add("itemUpdatedAt", parameterToString(*r.itemUpdatedAt, ""))
	}
	if r.availabilityUpdatedAt != nil {
		localVarQueryParams.Add("availabilityUpdatedAt", parameterToString(*r.availabilityUpdatedAt, ""))
	}
	if r.stockUpdatedAt != nil {
		localVarQueryParams.Add("stockUpdatedAt", parameterToString(*r.stockUpdatedAt, ""))
	}
	if r.barcodeUpdatedAt != nil {
		localVarQueryParams.Add("barcodeUpdatedAt", parameterToString(*r.barcodeUpdatedAt, ""))
	}
	if r.categoryUpdatedAt != nil {
		localVarQueryParams.Add("categoryUpdatedAt", parameterToString(*r.categoryUpdatedAt, ""))
	}
	if r.clientUpdatedAt != nil {
		localVarQueryParams.Add("clientUpdatedAt", parameterToString(*r.clientUpdatedAt, ""))
	}
	if r.marketUpdatedAt != nil {
		localVarQueryParams.Add("marketUpdatedAt", parameterToString(*r.marketUpdatedAt, ""))
	}
	if r.propertyUpdatedAt != nil {
		localVarQueryParams.Add("propertyUpdatedAt", parameterToString(*r.propertyUpdatedAt, ""))
	}
	if r.supplierUpdatedAt != nil {
		localVarQueryParams.Add("supplierUpdatedAt", parameterToString(*r.supplierUpdatedAt, ""))
	}
	if r.tagUpdatedAt != nil {
		localVarQueryParams.Add("tagUpdatedAt", parameterToString(*r.tagUpdatedAt, ""))
	}
	if r.warehouseUpdatedAt != nil {
		localVarQueryParams.Add("warehouseUpdatedAt", parameterToString(*r.warehouseUpdatedAt, ""))
	}
	if r.hasLowestPrice != nil {
		localVarQueryParams.Add("hasLowestPrice", parameterToString(*r.hasLowestPrice, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	warehouseId int32
	stockCorrections *StockCorrections
}

func (r ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest) StockCorrections(stockCorrections StockCorrections) ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest {
	r.stockCorrections = &stockCorrections
	return r
}

func (r ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.RestStockmanagementWarehousesWarehouseIdStockCorrectionPutExecute(r)
}

/*
RestStockmanagementWarehousesWarehouseIdStockCorrectionPut set stocks

set stocks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param warehouseId
 @return ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest
*/
func (a *DefaultApiService) RestStockmanagementWarehousesWarehouseIdStockCorrectionPut(ctx _context.Context, warehouseId int32) ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest {
	return ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest{
		ApiService: a,
		ctx: ctx,
		warehouseId: warehouseId,
	}
}

// Execute executes the request
func (a *DefaultApiService) RestStockmanagementWarehousesWarehouseIdStockCorrectionPutExecute(r ApiRestStockmanagementWarehousesWarehouseIdStockCorrectionPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RestStockmanagementWarehousesWarehouseIdStockCorrectionPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rest/stockmanagement/warehouses/{warehouseId}/stock/correction"
	localVarPath = strings.Replace(localVarPath, "{"+"warehouseId"+"}", _neturl.PathEscape(parameterToString(r.warehouseId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.stockCorrections
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
