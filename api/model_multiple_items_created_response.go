/*
Plentymarkets-API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MultipleItemsCreatedResponse format of the response when multiple items gots created
type MultipleItemsCreatedResponse struct {
	Success *map[string]Item `json:"success,omitempty"`
	Failed *map[string][]string `json:"failed,omitempty"`
}

// NewMultipleItemsCreatedResponse instantiates a new MultipleItemsCreatedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleItemsCreatedResponse() *MultipleItemsCreatedResponse {
	this := MultipleItemsCreatedResponse{}
	return &this
}

// NewMultipleItemsCreatedResponseWithDefaults instantiates a new MultipleItemsCreatedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleItemsCreatedResponseWithDefaults() *MultipleItemsCreatedResponse {
	this := MultipleItemsCreatedResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *MultipleItemsCreatedResponse) GetSuccess() map[string]Item {
	if o == nil || o.Success == nil {
		var ret map[string]Item
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleItemsCreatedResponse) GetSuccessOk() (*map[string]Item, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *MultipleItemsCreatedResponse) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given map[string]Item and assigns it to the Success field.
func (o *MultipleItemsCreatedResponse) SetSuccess(v map[string]Item) {
	o.Success = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *MultipleItemsCreatedResponse) GetFailed() map[string][]string {
	if o == nil || o.Failed == nil {
		var ret map[string][]string
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleItemsCreatedResponse) GetFailedOk() (*map[string][]string, bool) {
	if o == nil || o.Failed == nil {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *MultipleItemsCreatedResponse) HasFailed() bool {
	if o != nil && o.Failed != nil {
		return true
	}

	return false
}

// SetFailed gets a reference to the given map[string][]string and assigns it to the Failed field.
func (o *MultipleItemsCreatedResponse) SetFailed(v map[string][]string) {
	o.Failed = &v
}

func (o MultipleItemsCreatedResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Failed != nil {
		toSerialize["failed"] = o.Failed
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleItemsCreatedResponse struct {
	value *MultipleItemsCreatedResponse
	isSet bool
}

func (v NullableMultipleItemsCreatedResponse) Get() *MultipleItemsCreatedResponse {
	return v.value
}

func (v *NullableMultipleItemsCreatedResponse) Set(val *MultipleItemsCreatedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleItemsCreatedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleItemsCreatedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleItemsCreatedResponse(val *MultipleItemsCreatedResponse) *NullableMultipleItemsCreatedResponse {
	return &NullableMultipleItemsCreatedResponse{value: val, isSet: true}
}

func (v NullableMultipleItemsCreatedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleItemsCreatedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


